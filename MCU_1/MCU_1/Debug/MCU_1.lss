
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000990  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000990  00000a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d2  00800096  00800096  00000a5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b4e  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b97  00000000  00000000  00002766  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e30  00000000  00000000  000032fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00004130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c2b  00000000  00000000  00004338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bc3  00000000  00000000  00004f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005b26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 00 	call	0x108	; 0x108 <main>
  8a:	0c 94 c6 04 	jmp	0x98c	; 0x98c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <send_callback>:
 */ 
#include "app.h"

void send_callback(void)
{
	DIO_togglepin(DIO_PORTC, DIO_PIN0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_togglepin>
  9a:	08 95       	ret

0000009c <receive_callback>:
}

void receive_callback(uint8_t *ptr,int n_data)
{
	//DIO_setpinvalue(DIO_PORTC, DIO_PIN2, DIO_PIN_HIGH);
	if(!strcmp(ptr,"Confirm BCM operating"))
  9c:	61 e7       	ldi	r22, 0x71	; 113
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	0e 94 bd 04 	call	0x97a	; 0x97a <strcmp>
  a4:	89 2b       	or	r24, r25
  a6:	21 f4       	brne	.+8      	; 0xb0 <receive_callback+0x14>
	{
		DIO_togglepin(DIO_PORTC, DIO_PIN1);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_togglepin>
  b0:	08 95       	ret

000000b2 <APP1_init>:
}

void APP1_init(void)
{
	int buffer[20];
	str_bcm_instance_ch_0.receive_callback=receive_callback;
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	8e e4       	ldi	r24, 0x4E	; 78
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 8b       	std	Z+16, r25	; 0x10
  bc:	87 87       	std	Z+15, r24	; 0x0f
	str_bcm_instance_ch_0.send_callback=send_callback;
  be:	89 e4       	ldi	r24, 0x49	; 73
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	96 87       	std	Z+14, r25	; 0x0e
  c4:	85 87       	std	Z+13, r24	; 0x0d
	if(SUCCESS == bcm_init(&str_bcm_instance_ch_0))
  c6:	cf 01       	movw	r24, r30
  c8:	0e 94 89 00 	call	0x112	; 0x112 <bcm_init>
  cc:	81 11       	cpse	r24, r1
  ce:	0a c0       	rjmp	.+20     	; 0xe4 <APP1_init+0x32>
	{
		DIO_setpindir(DIO_PORTC, DIO_PIN0, DIO_PIN_OUTPUT);
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_setpindir>
		DIO_setpindir(DIO_PORTC, DIO_PIN1, DIO_PIN_OUTPUT);
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_setpindir>
	};
	TMR0_delayms(1000);
  e4:	68 ee       	ldi	r22, 0xE8	; 232
  e6:	73 e0       	ldi	r23, 0x03	; 3
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 03 	call	0x692	; 0x692 <TMR0_delayms>
	bcm_send_n("BCM Operating\r", 14);
  f0:	6e e0       	ldi	r22, 0x0E	; 14
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	87 e8       	ldi	r24, 0x87	; 135
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <bcm_send_n>
  fc:	08 95       	ret

000000fe <APP1>:
}

void APP1(void)
{
	bcm_dispatcher(&str_bcm_instance_ch_0);
  fe:	80 e6       	ldi	r24, 0x60	; 96
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 ff 01 	call	0x3fe	; 0x3fe <bcm_dispatcher>
 106:	08 95       	ret

00000108 <main>:
//#include <avr/io.h>
#include "APP/app.h"

int main(void)
{
	APP1_init();
 108:	0e 94 59 00 	call	0xb2	; 0xb2 <APP1_init>
    /* Replace with your application code */
    while (1) 
    {
		APP1();
 10c:	0e 94 7f 00 	call	0xfe	; 0xfe <APP1>
 110:	fd cf       	rjmp	.-6      	; 0x10c <main+0x4>

00000112 <bcm_init>:
	{
		return 0;
	}
	memcpy(ar_data, str_receive, receive_n>=n? n:receive_n);
	return receive_n>=n? n:receive_n;
}
 112:	fc 01       	movw	r30, r24
 114:	89 2b       	or	r24, r25
 116:	09 f4       	brne	.+2      	; 0x11a <bcm_init+0x8>
 118:	48 c1       	rjmp	.+656    	; 0x3aa <bcm_init+0x298>
 11a:	80 81       	ld	r24, Z
 11c:	81 11       	cpse	r24, r1
 11e:	47 c1       	rjmp	.+654    	; 0x3ae <bcm_init+0x29c>
 120:	81 81       	ldd	r24, Z+1	; 0x01
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	21 f4       	brne	.+8      	; 0x12e <bcm_init+0x1c>
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	05 c0       	rjmp	.+10     	; 0x138 <bcm_init+0x26>
 12e:	81 11       	cpse	r24, r1
 130:	40 c1       	rjmp	.+640    	; 0x3b2 <bcm_init+0x2a0>
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	82 60       	ori	r24, 0x02	; 2
 136:	8b b9       	out	0x0b, r24	; 11
 138:	82 81       	ldd	r24, Z+2	; 0x02
 13a:	81 11       	cpse	r24, r1
 13c:	07 c0       	rjmp	.+14     	; 0x14c <bcm_init+0x3a>
 13e:	8f b7       	in	r24, 0x3f	; 63
 140:	80 68       	ori	r24, 0x80	; 128
 142:	8f bf       	out	0x3f, r24	; 63
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	80 68       	ori	r24, 0x80	; 128
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	06 c0       	rjmp	.+12     	; 0x158 <bcm_init+0x46>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	09 f0       	breq	.+2      	; 0x152 <bcm_init+0x40>
 150:	32 c1       	rjmp	.+612    	; 0x3b6 <bcm_init+0x2a4>
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	8f 77       	andi	r24, 0x7F	; 127
 156:	8a b9       	out	0x0a, r24	; 10
 158:	83 81       	ldd	r24, Z+3	; 0x03
 15a:	81 11       	cpse	r24, r1
 15c:	07 c0       	rjmp	.+14     	; 0x16c <bcm_init+0x5a>
 15e:	8f b7       	in	r24, 0x3f	; 63
 160:	80 68       	ori	r24, 0x80	; 128
 162:	8f bf       	out	0x3f, r24	; 63
 164:	8a b1       	in	r24, 0x0a	; 10
 166:	80 64       	ori	r24, 0x40	; 64
 168:	8a b9       	out	0x0a, r24	; 10
 16a:	06 c0       	rjmp	.+12     	; 0x178 <bcm_init+0x66>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	09 f0       	breq	.+2      	; 0x172 <bcm_init+0x60>
 170:	24 c1       	rjmp	.+584    	; 0x3ba <bcm_init+0x2a8>
 172:	8a b1       	in	r24, 0x0a	; 10
 174:	8f 7b       	andi	r24, 0xBF	; 191
 176:	8a b9       	out	0x0a, r24	; 10
 178:	84 81       	ldd	r24, Z+4	; 0x04
 17a:	81 11       	cpse	r24, r1
 17c:	07 c0       	rjmp	.+14     	; 0x18c <bcm_init+0x7a>
 17e:	8f b7       	in	r24, 0x3f	; 63
 180:	80 68       	ori	r24, 0x80	; 128
 182:	8f bf       	out	0x3f, r24	; 63
 184:	8a b1       	in	r24, 0x0a	; 10
 186:	80 62       	ori	r24, 0x20	; 32
 188:	8a b9       	out	0x0a, r24	; 10
 18a:	06 c0       	rjmp	.+12     	; 0x198 <bcm_init+0x86>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	09 f0       	breq	.+2      	; 0x192 <bcm_init+0x80>
 190:	16 c1       	rjmp	.+556    	; 0x3be <bcm_init+0x2ac>
 192:	8a b1       	in	r24, 0x0a	; 10
 194:	8f 7d       	andi	r24, 0xDF	; 223
 196:	8a b9       	out	0x0a, r24	; 10
 198:	85 81       	ldd	r24, Z+5	; 0x05
 19a:	81 11       	cpse	r24, r1
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <bcm_init+0x94>
 19e:	8a b1       	in	r24, 0x0a	; 10
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	8a b9       	out	0x0a, r24	; 10
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <bcm_init+0xa0>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	09 f0       	breq	.+2      	; 0x1ac <bcm_init+0x9a>
 1aa:	0b c1       	rjmp	.+534    	; 0x3c2 <bcm_init+0x2b0>
 1ac:	8a b1       	in	r24, 0x0a	; 10
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
 1b0:	8a b9       	out	0x0a, r24	; 10
 1b2:	86 81       	ldd	r24, Z+6	; 0x06
 1b4:	81 11       	cpse	r24, r1
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <bcm_init+0xae>
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <bcm_init+0xba>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <bcm_init+0xb4>
 1c4:	00 c1       	rjmp	.+512    	; 0x3c6 <bcm_init+0x2b4>
 1c6:	8a b1       	in	r24, 0x0a	; 10
 1c8:	87 7f       	andi	r24, 0xF7	; 247
 1ca:	8a b9       	out	0x0a, r24	; 10
 1cc:	87 81       	ldd	r24, Z+7	; 0x07
 1ce:	81 11       	cpse	r24, r1
 1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <bcm_init+0xd4>
 1d2:	80 b5       	in	r24, 0x20	; 32
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	80 bd       	out	0x20, r24	; 32
 1d8:	80 b5       	in	r24, 0x20	; 32
 1da:	8f 7d       	andi	r24, 0xDF	; 223
 1dc:	80 bd       	out	0x20, r24	; 32
 1de:	80 b5       	in	r24, 0x20	; 32
 1e0:	8f 7e       	andi	r24, 0xEF	; 239
 1e2:	80 bd       	out	0x20, r24	; 32
 1e4:	18 c0       	rjmp	.+48     	; 0x216 <bcm_init+0x104>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	51 f4       	brne	.+20     	; 0x1fe <bcm_init+0xec>
 1ea:	80 b5       	in	r24, 0x20	; 32
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	80 bd       	out	0x20, r24	; 32
 1f0:	80 b5       	in	r24, 0x20	; 32
 1f2:	80 62       	ori	r24, 0x20	; 32
 1f4:	80 bd       	out	0x20, r24	; 32
 1f6:	80 b5       	in	r24, 0x20	; 32
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	80 bd       	out	0x20, r24	; 32
 1fc:	0c c0       	rjmp	.+24     	; 0x216 <bcm_init+0x104>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	09 f0       	breq	.+2      	; 0x204 <bcm_init+0xf2>
 202:	e3 c0       	rjmp	.+454    	; 0x3ca <bcm_init+0x2b8>
 204:	80 b5       	in	r24, 0x20	; 32
 206:	80 68       	ori	r24, 0x80	; 128
 208:	80 bd       	out	0x20, r24	; 32
 20a:	80 b5       	in	r24, 0x20	; 32
 20c:	80 62       	ori	r24, 0x20	; 32
 20e:	80 bd       	out	0x20, r24	; 32
 210:	80 b5       	in	r24, 0x20	; 32
 212:	80 61       	ori	r24, 0x10	; 16
 214:	80 bd       	out	0x20, r24	; 32
 216:	80 85       	ldd	r24, Z+8	; 0x08
 218:	81 11       	cpse	r24, r1
 21a:	07 c0       	rjmp	.+14     	; 0x22a <bcm_init+0x118>
 21c:	80 b5       	in	r24, 0x20	; 32
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	80 bd       	out	0x20, r24	; 32
 222:	80 b5       	in	r24, 0x20	; 32
 224:	87 7f       	andi	r24, 0xF7	; 247
 226:	80 bd       	out	0x20, r24	; 32
 228:	0e c0       	rjmp	.+28     	; 0x246 <bcm_init+0x134>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	39 f4       	brne	.+14     	; 0x23c <bcm_init+0x12a>
 22e:	80 b5       	in	r24, 0x20	; 32
 230:	80 68       	ori	r24, 0x80	; 128
 232:	80 bd       	out	0x20, r24	; 32
 234:	80 b5       	in	r24, 0x20	; 32
 236:	88 60       	ori	r24, 0x08	; 8
 238:	80 bd       	out	0x20, r24	; 32
 23a:	05 c0       	rjmp	.+10     	; 0x246 <bcm_init+0x134>
 23c:	80 b5       	in	r24, 0x20	; 32
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	80 bd       	out	0x20, r24	; 32
 242:	89 e0       	ldi	r24, 0x09	; 9
 244:	08 95       	ret
 246:	80 b5       	in	r24, 0x20	; 32
 248:	8f 77       	andi	r24, 0x7F	; 127
 24a:	80 bd       	out	0x20, r24	; 32
 24c:	81 85       	ldd	r24, Z+9	; 0x09
 24e:	81 11       	cpse	r24, r1
 250:	0b c0       	rjmp	.+22     	; 0x268 <bcm_init+0x156>
 252:	81 81       	ldd	r24, Z+1	; 0x01
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	19 f4       	brne	.+6      	; 0x25e <bcm_init+0x14c>
 258:	8f ec       	ldi	r24, 0xCF	; 207
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <bcm_init+0x150>
 25e:	8f e9       	ldi	r24, 0x9F	; 159
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	90 bd       	out	0x20, r25	; 32
 264:	89 b9       	out	0x09, r24	; 9
 266:	8c c0       	rjmp	.+280    	; 0x380 <bcm_init+0x26e>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	59 f4       	brne	.+22     	; 0x282 <bcm_init+0x170>
 26c:	81 81       	ldd	r24, Z+1	; 0x01
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	19 f4       	brne	.+6      	; 0x278 <bcm_init+0x166>
 272:	87 e6       	ldi	r24, 0x67	; 103
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <bcm_init+0x16a>
 278:	8f ec       	ldi	r24, 0xCF	; 207
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 bd       	out	0x20, r25	; 32
 27e:	89 b9       	out	0x09, r24	; 9
 280:	7f c0       	rjmp	.+254    	; 0x380 <bcm_init+0x26e>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	59 f4       	brne	.+22     	; 0x29c <bcm_init+0x18a>
 286:	81 81       	ldd	r24, Z+1	; 0x01
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	19 f4       	brne	.+6      	; 0x292 <bcm_init+0x180>
 28c:	83 e3       	ldi	r24, 0x33	; 51
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <bcm_init+0x184>
 292:	87 e6       	ldi	r24, 0x67	; 103
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 bd       	out	0x20, r25	; 32
 298:	89 b9       	out	0x09, r24	; 9
 29a:	72 c0       	rjmp	.+228    	; 0x380 <bcm_init+0x26e>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	59 f4       	brne	.+22     	; 0x2b6 <bcm_init+0x1a4>
 2a0:	81 81       	ldd	r24, Z+1	; 0x01
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	19 f4       	brne	.+6      	; 0x2ac <bcm_init+0x19a>
 2a6:	81 e2       	ldi	r24, 0x21	; 33
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <bcm_init+0x19e>
 2ac:	84 e4       	ldi	r24, 0x44	; 68
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 bd       	out	0x20, r25	; 32
 2b2:	89 b9       	out	0x09, r24	; 9
 2b4:	65 c0       	rjmp	.+202    	; 0x380 <bcm_init+0x26e>
 2b6:	84 30       	cpi	r24, 0x04	; 4
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <bcm_init+0x1be>
 2ba:	81 81       	ldd	r24, Z+1	; 0x01
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	19 f4       	brne	.+6      	; 0x2c6 <bcm_init+0x1b4>
 2c0:	89 e1       	ldi	r24, 0x19	; 25
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <bcm_init+0x1b8>
 2c6:	83 e3       	ldi	r24, 0x33	; 51
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	90 bd       	out	0x20, r25	; 32
 2cc:	89 b9       	out	0x09, r24	; 9
 2ce:	58 c0       	rjmp	.+176    	; 0x380 <bcm_init+0x26e>
 2d0:	85 30       	cpi	r24, 0x05	; 5
 2d2:	59 f4       	brne	.+22     	; 0x2ea <bcm_init+0x1d8>
 2d4:	81 81       	ldd	r24, Z+1	; 0x01
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	19 f4       	brne	.+6      	; 0x2e0 <bcm_init+0x1ce>
 2da:	80 e1       	ldi	r24, 0x10	; 16
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <bcm_init+0x1d2>
 2e0:	81 e2       	ldi	r24, 0x21	; 33
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 bd       	out	0x20, r25	; 32
 2e6:	89 b9       	out	0x09, r24	; 9
 2e8:	4b c0       	rjmp	.+150    	; 0x380 <bcm_init+0x26e>
 2ea:	86 30       	cpi	r24, 0x06	; 6
 2ec:	59 f4       	brne	.+22     	; 0x304 <bcm_init+0x1f2>
 2ee:	81 81       	ldd	r24, Z+1	; 0x01
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	19 f4       	brne	.+6      	; 0x2fa <bcm_init+0x1e8>
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <bcm_init+0x1ec>
 2fa:	89 e1       	ldi	r24, 0x19	; 25
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	90 bd       	out	0x20, r25	; 32
 300:	89 b9       	out	0x09, r24	; 9
 302:	3e c0       	rjmp	.+124    	; 0x380 <bcm_init+0x26e>
 304:	87 30       	cpi	r24, 0x07	; 7
 306:	59 f4       	brne	.+22     	; 0x31e <bcm_init+0x20c>
 308:	81 81       	ldd	r24, Z+1	; 0x01
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	19 f4       	brne	.+6      	; 0x314 <bcm_init+0x202>
 30e:	87 e0       	ldi	r24, 0x07	; 7
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <bcm_init+0x206>
 314:	80 e1       	ldi	r24, 0x10	; 16
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 bd       	out	0x20, r25	; 32
 31a:	89 b9       	out	0x09, r24	; 9
 31c:	31 c0       	rjmp	.+98     	; 0x380 <bcm_init+0x26e>
 31e:	88 30       	cpi	r24, 0x08	; 8
 320:	59 f4       	brne	.+22     	; 0x338 <bcm_init+0x226>
 322:	81 81       	ldd	r24, Z+1	; 0x01
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	19 f4       	brne	.+6      	; 0x32e <bcm_init+0x21c>
 328:	85 e0       	ldi	r24, 0x05	; 5
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <bcm_init+0x220>
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 bd       	out	0x20, r25	; 32
 334:	89 b9       	out	0x09, r24	; 9
 336:	24 c0       	rjmp	.+72     	; 0x380 <bcm_init+0x26e>
 338:	89 30       	cpi	r24, 0x09	; 9
 33a:	59 f4       	brne	.+22     	; 0x352 <bcm_init+0x240>
 33c:	81 81       	ldd	r24, Z+1	; 0x01
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	19 f4       	brne	.+6      	; 0x348 <bcm_init+0x236>
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <bcm_init+0x23a>
 348:	87 e0       	ldi	r24, 0x07	; 7
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	90 bd       	out	0x20, r25	; 32
 34e:	89 b9       	out	0x09, r24	; 9
 350:	17 c0       	rjmp	.+46     	; 0x380 <bcm_init+0x26e>
 352:	8a 30       	cpi	r24, 0x0A	; 10
 354:	51 f4       	brne	.+20     	; 0x36a <bcm_init+0x258>
 356:	81 81       	ldd	r24, Z+1	; 0x01
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	11 f4       	brne	.+4      	; 0x360 <bcm_init+0x24e>
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <bcm_init+0x252>
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	90 bd       	out	0x20, r25	; 32
 366:	89 b9       	out	0x09, r24	; 9
 368:	0b c0       	rjmp	.+22     	; 0x380 <bcm_init+0x26e>
 36a:	8b 30       	cpi	r24, 0x0B	; 11
 36c:	81 f5       	brne	.+96     	; 0x3ce <bcm_init+0x2bc>
 36e:	81 81       	ldd	r24, Z+1	; 0x01
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	11 f4       	brne	.+4      	; 0x378 <bcm_init+0x266>
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <bcm_init+0x26a>
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 bd       	out	0x20, r25	; 32
 37e:	89 b9       	out	0x09, r24	; 9
 380:	80 b5       	in	r24, 0x20	; 32
 382:	80 68       	ori	r24, 0x80	; 128
 384:	80 bd       	out	0x20, r24	; 32
 386:	80 b5       	in	r24, 0x20	; 32
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	80 bd       	out	0x20, r24	; 32
 38c:	80 b5       	in	r24, 0x20	; 32
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	80 bd       	out	0x20, r24	; 32
 392:	80 b5       	in	r24, 0x20	; 32
 394:	8f 7b       	andi	r24, 0xBF	; 191
 396:	80 bd       	out	0x20, r24	; 32
 398:	8a b1       	in	r24, 0x0a	; 10
 39a:	8b 7f       	andi	r24, 0xFB	; 251
 39c:	8a b9       	out	0x0a, r24	; 10
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	82 87       	std	Z+10, r24	; 0x0a
 3a2:	13 86       	std	Z+11, r1	; 0x0b
 3a4:	14 86       	std	Z+12, r1	; 0x0c
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	08 95       	ret
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	08 95       	ret
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	08 95       	ret
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	08 95       	ret
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	08 95       	ret
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	08 95       	ret
 3c6:	87 e0       	ldi	r24, 0x07	; 7
 3c8:	08 95       	ret
 3ca:	88 e0       	ldi	r24, 0x08	; 8
 3cc:	08 95       	ret
 3ce:	8a e0       	ldi	r24, 0x0A	; 10
 3d0:	08 95       	ret

000003d2 <bcm_send>:
 3d2:	8c b9       	out	0x0c, r24	; 12
 3d4:	08 95       	ret

000003d6 <bcm_send_n>:
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	eb 01       	movw	r28, r22
 3dc:	ab 01       	movw	r20, r22
 3de:	bc 01       	movw	r22, r24
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 b4 04 	call	0x968	; 0x968 <memcpy>
 3e8:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <send_n+0x1>
 3ec:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <send_n>
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <bcm_receive>:
 3f6:	2c b1       	in	r18, 0x0c	; 12
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
 3fc:	08 95       	ret

000003fe <bcm_dispatcher>:


enu_system_status_t bcm_dispatcher(str_bcm_meduim_t* ptr_str_bcm_meduim)
{
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	ec 01       	movw	r28, r24
	
	static uint16_t i=0;
	static uint16_t j=0;
	if((read_bit(UCSRA, 6) == 1 && i<send_n) || (i==0 && send_n>0))
 404:	5e 9b       	sbis	0x0b, 6	; 11
 406:	0b c0       	rjmp	.+22     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 408:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <i.1891>
 40c:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <i.1891+0x1>
 410:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <send_n>
 414:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <send_n+0x1>
 418:	28 17       	cp	r18, r24
 41a:	39 07       	cpc	r19, r25
 41c:	60 f0       	brcs	.+24     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <i.1891>
 422:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <i.1891+0x1>
 426:	89 2b       	or	r24, r25
 428:	d9 f4       	brne	.+54     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 42a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <send_n>
 42e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <send_n+0x1>
 432:	89 2b       	or	r24, r25
 434:	a9 f0       	breq	.+42     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
	{
		set_bit(UCSRA,6);
 436:	8b b1       	in	r24, 0x0b	; 11
 438:	80 64       	ori	r24, 0x40	; 64
 43a:	8b b9       	out	0x0b, r24	; 11
		bcm_send(str_send[i]);
 43c:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <i.1891>
 440:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <i.1891+0x1>
 444:	ec 5f       	subi	r30, 0xFC	; 252
 446:	fe 4f       	sbci	r31, 0xFE	; 254
 448:	80 81       	ld	r24, Z
 44a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <bcm_send>
		i++;
 44e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <i.1891>
 452:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <i.1891+0x1>
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <i.1891+0x1>
 45c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <i.1891>
	}
	if(read_bit(UCSRA, 7) == 1)
 460:	5f 9b       	sbis	0x0b, 7	; 11
 462:	11 c0       	rjmp	.+34     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
	{
		bcm_receive(&str_receive[j]);
 464:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 468:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 46c:	80 56       	subi	r24, 0x60	; 96
 46e:	9f 4f       	sbci	r25, 0xFF	; 255
 470:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <bcm_receive>
		j++;
 474:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 478:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x1>
 482:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
	}
	if(i!=0 && i==send_n)
 486:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <i.1891>
 48a:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <i.1891+0x1>
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	91 f0       	breq	.+36     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 492:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <send_n>
 496:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <send_n+0x1>
 49a:	82 17       	cp	r24, r18
 49c:	93 07       	cpc	r25, r19
 49e:	59 f4       	brne	.+22     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
	{
		ptr_str_bcm_meduim->send_callback();
 4a0:	ed 85       	ldd	r30, Y+13	; 0x0d
 4a2:	fe 85       	ldd	r31, Y+14	; 0x0e
 4a4:	09 95       	icall
		i=0;
 4a6:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <i.1891+0x1>
 4aa:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <i.1891>
		send_n=0;
 4ae:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <send_n+0x1>
 4b2:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <send_n>
	}
	
	if(j>0 && str_receive[j-1]=='\r')
 4b6:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <__data_end>
 4ba:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <__data_end+0x1>
 4be:	61 15       	cp	r22, r1
 4c0:	71 05       	cpc	r23, r1
 4c2:	a9 f0       	breq	.+42     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4c4:	cb 01       	movw	r24, r22
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	fc 01       	movw	r30, r24
 4ca:	e0 56       	subi	r30, 0x60	; 96
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	20 81       	ld	r18, Z
 4d0:	2d 30       	cpi	r18, 0x0D	; 13
 4d2:	69 f4       	brne	.+26     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
	{
		str_receive[j-1]='\0';
 4d4:	fc 01       	movw	r30, r24
 4d6:	e0 56       	subi	r30, 0x60	; 96
 4d8:	ff 4f       	sbci	r31, 0xFF	; 255
 4da:	10 82       	st	Z, r1
		ptr_str_bcm_meduim->receive_callback(str_receive, j);
 4dc:	ef 85       	ldd	r30, Y+15	; 0x0f
 4de:	f8 89       	ldd	r31, Y+16	; 0x10
 4e0:	80 ea       	ldi	r24, 0xA0	; 160
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	09 95       	icall
		j=0;
 4e6:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__data_end+0x1>
 4ea:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end>
	}
	
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <DIO_setpindir>:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
 4f4:	44 23       	and	r20, r20
 4f6:	19 f0       	breq	.+6      	; 0x4fe <DIO_setpindir+0xa>
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	e9 f1       	breq	.+122    	; 0x576 <DIO_setpindir+0x82>
 4fc:	74 c0       	rjmp	.+232    	; 0x5e6 <DIO_setpindir+0xf2>
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	99 f0       	breq	.+38     	; 0x528 <DIO_setpindir+0x34>
 502:	28 f0       	brcs	.+10     	; 0x50e <DIO_setpindir+0x1a>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	e9 f0       	breq	.+58     	; 0x542 <DIO_setpindir+0x4e>
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	41 f1       	breq	.+80     	; 0x55c <DIO_setpindir+0x68>
 50c:	6e c0       	rjmp	.+220    	; 0x5ea <DIO_setpindir+0xf6>
 50e:	2a b3       	in	r18, 0x1a	; 26
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_setpindir+0x26>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_setpindir+0x22>
 51e:	80 95       	com	r24
 520:	82 23       	and	r24, r18
 522:	8a bb       	out	0x1a, r24	; 26
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	08 95       	ret
 528:	27 b3       	in	r18, 0x17	; 23
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_setpindir+0x40>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_setpindir+0x3c>
 538:	80 95       	com	r24
 53a:	82 23       	and	r24, r18
 53c:	87 bb       	out	0x17, r24	; 23
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	08 95       	ret
 542:	24 b3       	in	r18, 0x14	; 20
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_setpindir+0x5a>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_setpindir+0x56>
 552:	80 95       	com	r24
 554:	82 23       	and	r24, r18
 556:	84 bb       	out	0x14, r24	; 20
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	08 95       	ret
 55c:	21 b3       	in	r18, 0x11	; 17
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_setpindir+0x74>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	6a 95       	dec	r22
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_setpindir+0x70>
 56c:	80 95       	com	r24
 56e:	82 23       	and	r24, r18
 570:	81 bb       	out	0x11, r24	; 17
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	08 95       	ret
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	91 f0       	breq	.+36     	; 0x59e <DIO_setpindir+0xaa>
 57a:	28 f0       	brcs	.+10     	; 0x586 <DIO_setpindir+0x92>
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	d9 f0       	breq	.+54     	; 0x5b6 <DIO_setpindir+0xc2>
 580:	83 30       	cpi	r24, 0x03	; 3
 582:	29 f1       	breq	.+74     	; 0x5ce <DIO_setpindir+0xda>
 584:	34 c0       	rjmp	.+104    	; 0x5ee <DIO_setpindir+0xfa>
 586:	2a b3       	in	r18, 0x1a	; 26
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_setpindir+0x9e>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_setpindir+0x9a>
 596:	82 2b       	or	r24, r18
 598:	8a bb       	out	0x1a, r24	; 26
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	08 95       	ret
 59e:	27 b3       	in	r18, 0x17	; 23
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_setpindir+0xb6>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_setpindir+0xb2>
 5ae:	82 2b       	or	r24, r18
 5b0:	87 bb       	out	0x17, r24	; 23
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	08 95       	ret
 5b6:	24 b3       	in	r18, 0x14	; 20
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_setpindir+0xce>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	6a 95       	dec	r22
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_setpindir+0xca>
 5c6:	82 2b       	or	r24, r18
 5c8:	84 bb       	out	0x14, r24	; 20
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	08 95       	ret
 5ce:	21 b3       	in	r18, 0x11	; 17
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_setpindir+0xe6>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_setpindir+0xe2>
 5de:	82 2b       	or	r24, r18
 5e0:	81 bb       	out	0x11, r24	; 17
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	08 95       	ret
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	08 95       	ret
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	08 95       	ret

000005f2 <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	91 f0       	breq	.+36     	; 0x61a <DIO_togglepin+0x28>
 5f6:	28 f0       	brcs	.+10     	; 0x602 <DIO_togglepin+0x10>
 5f8:	82 30       	cpi	r24, 0x02	; 2
 5fa:	d9 f0       	breq	.+54     	; 0x632 <DIO_togglepin+0x40>
 5fc:	83 30       	cpi	r24, 0x03	; 3
 5fe:	29 f1       	breq	.+74     	; 0x64a <DIO_togglepin+0x58>
 600:	30 c0       	rjmp	.+96     	; 0x662 <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
 602:	2b b3       	in	r18, 0x1b	; 27
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_togglepin+0x1c>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_togglepin+0x18>
 612:	82 27       	eor	r24, r18
 614:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 616:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
 618:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
 61a:	28 b3       	in	r18, 0x18	; 24
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_togglepin+0x34>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	6a 95       	dec	r22
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_togglepin+0x30>
 62a:	82 27       	eor	r24, r18
 62c:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 62e:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
 630:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
 632:	25 b3       	in	r18, 0x15	; 21
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_togglepin+0x4c>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_togglepin+0x48>
 642:	82 27       	eor	r24, r18
 644:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 646:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
 648:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
 64a:	22 b3       	in	r18, 0x12	; 18
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_togglepin+0x64>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_togglepin+0x60>
 65a:	82 27       	eor	r24, r18
 65c:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 65e:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
 660:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
 662:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
 664:	08 95       	ret

00000666 <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
 666:	83 b7       	in	r24, 0x33	; 51
 668:	81 60       	ori	r24, 0x01	; 1
 66a:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	8d 7f       	andi	r24, 0xFD	; 253
 670:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 672:	83 b7       	in	r24, 0x33	; 51
 674:	8b 7f       	andi	r24, 0xFB	; 251
 676:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret

0000067c <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 67c:	83 b7       	in	r24, 0x33	; 51
 67e:	8e 7f       	andi	r24, 0xFE	; 254
 680:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 682:	83 b7       	in	r24, 0x33	; 51
 684:	8d 7f       	andi	r24, 0xFD	; 253
 686:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 688:	83 b7       	in	r24, 0x33	; 51
 68a:	8b 7f       	andi	r24, 0xFB	; 251
 68c:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	08 95       	ret

00000692 <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.016);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
 692:	0e 94 26 04 	call	0x84c	; 0x84c <__floatunsisf>
 696:	2f e6       	ldi	r18, 0x6F	; 111
 698:	32 e1       	ldi	r19, 0x12	; 18
 69a:	43 e8       	ldi	r20, 0x83	; 131
 69c:	5c e3       	ldi	r21, 0x3C	; 60
 69e:	0e 94 85 03 	call	0x70a	; 0x70a <__divsf3>
 6a2:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fixunssfsi>
 6a6:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <u32_gs_tmr0nuofovs>
 6aa:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <u32_gs_tmr0nuofovs+0x1>
 6ae:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <u32_gs_tmr0nuofovs+0x2>
 6b2:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <u32_gs_tmr0nuofovs+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 6b6:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 6b8:	0e 94 33 03 	call	0x666	; 0x666 <TMR0_start>
/** @return     TMR0_delay status                                              */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 6c4:	08 b6       	in	r0, 0x38	; 56
 6c6:	00 fe       	sbrs	r0, 0
 6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 6ca:	88 b7       	in	r24, 0x38	; 56
 6cc:	81 60       	ori	r24, 0x01	; 1
 6ce:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 6d0:	4f 5f       	subi	r20, 0xFF	; 255
 6d2:	5f 4f       	sbci	r21, 0xFF	; 255
 6d4:	6f 4f       	sbci	r22, 0xFF	; 255
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 6d8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <u32_gs_tmr0nuofovs>
 6dc:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <u32_gs_tmr0nuofovs+0x1>
 6e0:	a0 91 9e 00 	lds	r26, 0x009E	; 0x80009e <u32_gs_tmr0nuofovs+0x2>
 6e4:	b0 91 9f 00 	lds	r27, 0x009F	; 0x80009f <u32_gs_tmr0nuofovs+0x3>
 6e8:	48 17       	cp	r20, r24
 6ea:	59 07       	cpc	r21, r25
 6ec:	6a 07       	cpc	r22, r26
 6ee:	7b 07       	cpc	r23, r27
 6f0:	48 f3       	brcs	.-46     	; 0x6c4 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 6f2:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <u32_gs_tmr0nuofovs>
 6f6:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <u32_gs_tmr0nuofovs+0x1>
 6fa:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <u32_gs_tmr0nuofovs+0x2>
 6fe:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 702:	0e 94 3e 03 	call	0x67c	; 0x67c <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	08 95       	ret

0000070a <__divsf3>:
 70a:	0e 94 99 03 	call	0x732	; 0x732 <__divsf3x>
 70e:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_round>
 712:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_pscB>
 716:	58 f0       	brcs	.+22     	; 0x72e <__divsf3+0x24>
 718:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_pscA>
 71c:	40 f0       	brcs	.+16     	; 0x72e <__divsf3+0x24>
 71e:	29 f4       	brne	.+10     	; 0x72a <__divsf3+0x20>
 720:	5f 3f       	cpi	r21, 0xFF	; 255
 722:	29 f0       	breq	.+10     	; 0x72e <__divsf3+0x24>
 724:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 728:	51 11       	cpse	r21, r1
 72a:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_szero>
 72e:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_nan>

00000732 <__divsf3x>:
 732:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_split3>
 736:	68 f3       	brcs	.-38     	; 0x712 <__divsf3+0x8>

00000738 <__divsf3_pse>:
 738:	99 23       	and	r25, r25
 73a:	b1 f3       	breq	.-20     	; 0x728 <__divsf3+0x1e>
 73c:	55 23       	and	r21, r21
 73e:	91 f3       	breq	.-28     	; 0x724 <__divsf3+0x1a>
 740:	95 1b       	sub	r25, r21
 742:	55 0b       	sbc	r21, r21
 744:	bb 27       	eor	r27, r27
 746:	aa 27       	eor	r26, r26
 748:	62 17       	cp	r22, r18
 74a:	73 07       	cpc	r23, r19
 74c:	84 07       	cpc	r24, r20
 74e:	38 f0       	brcs	.+14     	; 0x75e <__divsf3_pse+0x26>
 750:	9f 5f       	subi	r25, 0xFF	; 255
 752:	5f 4f       	sbci	r21, 0xFF	; 255
 754:	22 0f       	add	r18, r18
 756:	33 1f       	adc	r19, r19
 758:	44 1f       	adc	r20, r20
 75a:	aa 1f       	adc	r26, r26
 75c:	a9 f3       	breq	.-22     	; 0x748 <__divsf3_pse+0x10>
 75e:	35 d0       	rcall	.+106    	; 0x7ca <__divsf3_pse+0x92>
 760:	0e 2e       	mov	r0, r30
 762:	3a f0       	brmi	.+14     	; 0x772 <__divsf3_pse+0x3a>
 764:	e0 e8       	ldi	r30, 0x80	; 128
 766:	32 d0       	rcall	.+100    	; 0x7cc <__divsf3_pse+0x94>
 768:	91 50       	subi	r25, 0x01	; 1
 76a:	50 40       	sbci	r21, 0x00	; 0
 76c:	e6 95       	lsr	r30
 76e:	00 1c       	adc	r0, r0
 770:	ca f7       	brpl	.-14     	; 0x764 <__divsf3_pse+0x2c>
 772:	2b d0       	rcall	.+86     	; 0x7ca <__divsf3_pse+0x92>
 774:	fe 2f       	mov	r31, r30
 776:	29 d0       	rcall	.+82     	; 0x7ca <__divsf3_pse+0x92>
 778:	66 0f       	add	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	88 1f       	adc	r24, r24
 77e:	bb 1f       	adc	r27, r27
 780:	26 17       	cp	r18, r22
 782:	37 07       	cpc	r19, r23
 784:	48 07       	cpc	r20, r24
 786:	ab 07       	cpc	r26, r27
 788:	b0 e8       	ldi	r27, 0x80	; 128
 78a:	09 f0       	breq	.+2      	; 0x78e <__divsf3_pse+0x56>
 78c:	bb 0b       	sbc	r27, r27
 78e:	80 2d       	mov	r24, r0
 790:	bf 01       	movw	r22, r30
 792:	ff 27       	eor	r31, r31
 794:	93 58       	subi	r25, 0x83	; 131
 796:	5f 4f       	sbci	r21, 0xFF	; 255
 798:	3a f0       	brmi	.+14     	; 0x7a8 <__divsf3_pse+0x70>
 79a:	9e 3f       	cpi	r25, 0xFE	; 254
 79c:	51 05       	cpc	r21, r1
 79e:	78 f0       	brcs	.+30     	; 0x7be <__divsf3_pse+0x86>
 7a0:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 7a4:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_szero>
 7a8:	5f 3f       	cpi	r21, 0xFF	; 255
 7aa:	e4 f3       	brlt	.-8      	; 0x7a4 <__divsf3_pse+0x6c>
 7ac:	98 3e       	cpi	r25, 0xE8	; 232
 7ae:	d4 f3       	brlt	.-12     	; 0x7a4 <__divsf3_pse+0x6c>
 7b0:	86 95       	lsr	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b7 95       	ror	r27
 7b8:	f7 95       	ror	r31
 7ba:	9f 5f       	subi	r25, 0xFF	; 255
 7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__divsf3_pse+0x78>
 7be:	88 0f       	add	r24, r24
 7c0:	91 1d       	adc	r25, r1
 7c2:	96 95       	lsr	r25
 7c4:	87 95       	ror	r24
 7c6:	97 f9       	bld	r25, 7
 7c8:	08 95       	ret
 7ca:	e1 e0       	ldi	r30, 0x01	; 1
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	bb 1f       	adc	r27, r27
 7d4:	62 17       	cp	r22, r18
 7d6:	73 07       	cpc	r23, r19
 7d8:	84 07       	cpc	r24, r20
 7da:	ba 07       	cpc	r27, r26
 7dc:	20 f0       	brcs	.+8      	; 0x7e6 <__divsf3_pse+0xae>
 7de:	62 1b       	sub	r22, r18
 7e0:	73 0b       	sbc	r23, r19
 7e2:	84 0b       	sbc	r24, r20
 7e4:	ba 0b       	sbc	r27, r26
 7e6:	ee 1f       	adc	r30, r30
 7e8:	88 f7       	brcc	.-30     	; 0x7cc <__divsf3_pse+0x94>
 7ea:	e0 95       	com	r30
 7ec:	08 95       	ret

000007ee <__fixunssfsi>:
 7ee:	0e 94 93 04 	call	0x926	; 0x926 <__fp_splitA>
 7f2:	88 f0       	brcs	.+34     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7f4:	9f 57       	subi	r25, 0x7F	; 127
 7f6:	98 f0       	brcs	.+38     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f8:	b9 2f       	mov	r27, r25
 7fa:	99 27       	eor	r25, r25
 7fc:	b7 51       	subi	r27, 0x17	; 23
 7fe:	b0 f0       	brcs	.+44     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 800:	e1 f0       	breq	.+56     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 802:	66 0f       	add	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	1a f0       	brmi	.+6      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80c:	ba 95       	dec	r27
 80e:	c9 f7       	brne	.-14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 810:	14 c0       	rjmp	.+40     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 812:	b1 30       	cpi	r27, 0x01	; 1
 814:	91 f0       	breq	.+36     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 816:	0e 94 ad 04 	call	0x95a	; 0x95a <__fp_zero>
 81a:	b1 e0       	ldi	r27, 0x01	; 1
 81c:	08 95       	ret
 81e:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__fp_zero>
 822:	67 2f       	mov	r22, r23
 824:	78 2f       	mov	r23, r24
 826:	88 27       	eor	r24, r24
 828:	b8 5f       	subi	r27, 0xF8	; 248
 82a:	39 f0       	breq	.+14     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 82c:	b9 3f       	cpi	r27, 0xF9	; 249
 82e:	cc f3       	brlt	.-14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 830:	86 95       	lsr	r24
 832:	77 95       	ror	r23
 834:	67 95       	ror	r22
 836:	b3 95       	inc	r27
 838:	d9 f7       	brne	.-10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 83a:	3e f4       	brtc	.+14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83c:	90 95       	com	r25
 83e:	80 95       	com	r24
 840:	70 95       	com	r23
 842:	61 95       	neg	r22
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	8f 4f       	sbci	r24, 0xFF	; 255
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	08 95       	ret

0000084c <__floatunsisf>:
 84c:	e8 94       	clt
 84e:	09 c0       	rjmp	.+18     	; 0x862 <__stack+0x3>

00000850 <__floatsisf>:
 850:	97 fb       	bst	r25, 7
 852:	3e f4       	brtc	.+14     	; 0x862 <__stack+0x3>
 854:	90 95       	com	r25
 856:	80 95       	com	r24
 858:	70 95       	com	r23
 85a:	61 95       	neg	r22
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	99 23       	and	r25, r25
 864:	a9 f0       	breq	.+42     	; 0x890 <__stack+0x31>
 866:	f9 2f       	mov	r31, r25
 868:	96 e9       	ldi	r25, 0x96	; 150
 86a:	bb 27       	eor	r27, r27
 86c:	93 95       	inc	r25
 86e:	f6 95       	lsr	r31
 870:	87 95       	ror	r24
 872:	77 95       	ror	r23
 874:	67 95       	ror	r22
 876:	b7 95       	ror	r27
 878:	f1 11       	cpse	r31, r1
 87a:	f8 cf       	rjmp	.-16     	; 0x86c <__stack+0xd>
 87c:	fa f4       	brpl	.+62     	; 0x8bc <__stack+0x5d>
 87e:	bb 0f       	add	r27, r27
 880:	11 f4       	brne	.+4      	; 0x886 <__stack+0x27>
 882:	60 ff       	sbrs	r22, 0
 884:	1b c0       	rjmp	.+54     	; 0x8bc <__stack+0x5d>
 886:	6f 5f       	subi	r22, 0xFF	; 255
 888:	7f 4f       	sbci	r23, 0xFF	; 255
 88a:	8f 4f       	sbci	r24, 0xFF	; 255
 88c:	9f 4f       	sbci	r25, 0xFF	; 255
 88e:	16 c0       	rjmp	.+44     	; 0x8bc <__stack+0x5d>
 890:	88 23       	and	r24, r24
 892:	11 f0       	breq	.+4      	; 0x898 <__stack+0x39>
 894:	96 e9       	ldi	r25, 0x96	; 150
 896:	11 c0       	rjmp	.+34     	; 0x8ba <__stack+0x5b>
 898:	77 23       	and	r23, r23
 89a:	21 f0       	breq	.+8      	; 0x8a4 <__stack+0x45>
 89c:	9e e8       	ldi	r25, 0x8E	; 142
 89e:	87 2f       	mov	r24, r23
 8a0:	76 2f       	mov	r23, r22
 8a2:	05 c0       	rjmp	.+10     	; 0x8ae <__stack+0x4f>
 8a4:	66 23       	and	r22, r22
 8a6:	71 f0       	breq	.+28     	; 0x8c4 <__stack+0x65>
 8a8:	96 e8       	ldi	r25, 0x86	; 134
 8aa:	86 2f       	mov	r24, r22
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	2a f0       	brmi	.+10     	; 0x8bc <__stack+0x5d>
 8b2:	9a 95       	dec	r25
 8b4:	66 0f       	add	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	88 1f       	adc	r24, r24
 8ba:	da f7       	brpl	.-10     	; 0x8b2 <__stack+0x53>
 8bc:	88 0f       	add	r24, r24
 8be:	96 95       	lsr	r25
 8c0:	87 95       	ror	r24
 8c2:	97 f9       	bld	r25, 7
 8c4:	08 95       	ret

000008c6 <__fp_inf>:
 8c6:	97 f9       	bld	r25, 7
 8c8:	9f 67       	ori	r25, 0x7F	; 127
 8ca:	80 e8       	ldi	r24, 0x80	; 128
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	08 95       	ret

000008d2 <__fp_nan>:
 8d2:	9f ef       	ldi	r25, 0xFF	; 255
 8d4:	80 ec       	ldi	r24, 0xC0	; 192
 8d6:	08 95       	ret

000008d8 <__fp_pscA>:
 8d8:	00 24       	eor	r0, r0
 8da:	0a 94       	dec	r0
 8dc:	16 16       	cp	r1, r22
 8de:	17 06       	cpc	r1, r23
 8e0:	18 06       	cpc	r1, r24
 8e2:	09 06       	cpc	r0, r25
 8e4:	08 95       	ret

000008e6 <__fp_pscB>:
 8e6:	00 24       	eor	r0, r0
 8e8:	0a 94       	dec	r0
 8ea:	12 16       	cp	r1, r18
 8ec:	13 06       	cpc	r1, r19
 8ee:	14 06       	cpc	r1, r20
 8f0:	05 06       	cpc	r0, r21
 8f2:	08 95       	ret

000008f4 <__fp_round>:
 8f4:	09 2e       	mov	r0, r25
 8f6:	03 94       	inc	r0
 8f8:	00 0c       	add	r0, r0
 8fa:	11 f4       	brne	.+4      	; 0x900 <__fp_round+0xc>
 8fc:	88 23       	and	r24, r24
 8fe:	52 f0       	brmi	.+20     	; 0x914 <__fp_round+0x20>
 900:	bb 0f       	add	r27, r27
 902:	40 f4       	brcc	.+16     	; 0x914 <__fp_round+0x20>
 904:	bf 2b       	or	r27, r31
 906:	11 f4       	brne	.+4      	; 0x90c <__fp_round+0x18>
 908:	60 ff       	sbrs	r22, 0
 90a:	04 c0       	rjmp	.+8      	; 0x914 <__fp_round+0x20>
 90c:	6f 5f       	subi	r22, 0xFF	; 255
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	08 95       	ret

00000916 <__fp_split3>:
 916:	57 fd       	sbrc	r21, 7
 918:	90 58       	subi	r25, 0x80	; 128
 91a:	44 0f       	add	r20, r20
 91c:	55 1f       	adc	r21, r21
 91e:	59 f0       	breq	.+22     	; 0x936 <__fp_splitA+0x10>
 920:	5f 3f       	cpi	r21, 0xFF	; 255
 922:	71 f0       	breq	.+28     	; 0x940 <__fp_splitA+0x1a>
 924:	47 95       	ror	r20

00000926 <__fp_splitA>:
 926:	88 0f       	add	r24, r24
 928:	97 fb       	bst	r25, 7
 92a:	99 1f       	adc	r25, r25
 92c:	61 f0       	breq	.+24     	; 0x946 <__fp_splitA+0x20>
 92e:	9f 3f       	cpi	r25, 0xFF	; 255
 930:	79 f0       	breq	.+30     	; 0x950 <__fp_splitA+0x2a>
 932:	87 95       	ror	r24
 934:	08 95       	ret
 936:	12 16       	cp	r1, r18
 938:	13 06       	cpc	r1, r19
 93a:	14 06       	cpc	r1, r20
 93c:	55 1f       	adc	r21, r21
 93e:	f2 cf       	rjmp	.-28     	; 0x924 <__fp_split3+0xe>
 940:	46 95       	lsr	r20
 942:	f1 df       	rcall	.-30     	; 0x926 <__fp_splitA>
 944:	08 c0       	rjmp	.+16     	; 0x956 <__fp_splitA+0x30>
 946:	16 16       	cp	r1, r22
 948:	17 06       	cpc	r1, r23
 94a:	18 06       	cpc	r1, r24
 94c:	99 1f       	adc	r25, r25
 94e:	f1 cf       	rjmp	.-30     	; 0x932 <__fp_splitA+0xc>
 950:	86 95       	lsr	r24
 952:	71 05       	cpc	r23, r1
 954:	61 05       	cpc	r22, r1
 956:	08 94       	sec
 958:	08 95       	ret

0000095a <__fp_zero>:
 95a:	e8 94       	clt

0000095c <__fp_szero>:
 95c:	bb 27       	eor	r27, r27
 95e:	66 27       	eor	r22, r22
 960:	77 27       	eor	r23, r23
 962:	cb 01       	movw	r24, r22
 964:	97 f9       	bld	r25, 7
 966:	08 95       	ret

00000968 <memcpy>:
 968:	fb 01       	movw	r30, r22
 96a:	dc 01       	movw	r26, r24
 96c:	02 c0       	rjmp	.+4      	; 0x972 <memcpy+0xa>
 96e:	01 90       	ld	r0, Z+
 970:	0d 92       	st	X+, r0
 972:	41 50       	subi	r20, 0x01	; 1
 974:	50 40       	sbci	r21, 0x00	; 0
 976:	d8 f7       	brcc	.-10     	; 0x96e <memcpy+0x6>
 978:	08 95       	ret

0000097a <strcmp>:
 97a:	fb 01       	movw	r30, r22
 97c:	dc 01       	movw	r26, r24
 97e:	8d 91       	ld	r24, X+
 980:	01 90       	ld	r0, Z+
 982:	80 19       	sub	r24, r0
 984:	01 10       	cpse	r0, r1
 986:	d9 f3       	breq	.-10     	; 0x97e <strcmp+0x4>
 988:	99 0b       	sbc	r25, r25
 98a:	08 95       	ret

0000098c <_exit>:
 98c:	f8 94       	cli

0000098e <__stop_program>:
 98e:	ff cf       	rjmp	.-2      	; 0x98e <__stop_program>
