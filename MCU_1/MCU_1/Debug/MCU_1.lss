
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000982  00000a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d2  00800094  00800094  00000a4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024a8  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1e  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011ec  00000000  00000000  00003f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  0000515c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bac  00000000  00000000  00005458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001388  00000000  00000000  00006004  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000738c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  8a:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <send_callback>:
#include "app.h"
#include "../SERV/bcm/BCM.h"

void send_callback(void)
{
	LED_TOGGLE(DIO_PORTC, DIO_PIN0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	0e 94 85 00 	call	0x10a	; 0x10a <LED_TOGGLE>
  9a:	08 95       	ret

0000009c <receive_callback>:
}

void receive_callback(uint8_t *ptr,int n_data)
{
	//DIO_setpinvalue(DIO_PORTC, DIO_PIN2, DIO_PIN_HIGH);
	if(!strcmp(ptr,"Confirm BCM operating"))
  9c:	60 e6       	ldi	r22, 0x60	; 96
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	0e 94 b6 04 	call	0x96c	; 0x96c <strcmp>
  a4:	89 2b       	or	r24, r25
  a6:	21 f4       	brne	.+8      	; 0xb0 <receive_callback+0x14>
	{
		LED_TOGGLE(DIO_PORTC, DIO_PIN1);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 85 00 	call	0x10a	; 0x10a <LED_TOGGLE>
  b0:	08 95       	ret

000000b2 <APP1_init>:
	
}

void APP1_init(void)
{
	if(SUCCESS == bcm_init(&str_bcm_instance_ch_0,send_callback,receive_callback))
  b2:	4e e4       	ldi	r20, 0x4E	; 78
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	69 e4       	ldi	r22, 0x49	; 73
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	81 e9       	ldi	r24, 0x91	; 145
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 11 03 	call	0x622	; 0x622 <bcm_init>
  c2:	81 11       	cpse	r24, r1
  c4:	16 c0       	rjmp	.+44     	; 0xf2 <APP1_init+0x40>
	{
		LED_init(DIO_PORTC, DIO_PIN0);
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_init>
		LED_init(DIO_PORTC, DIO_PIN1);
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_init>
		TMR0_delayms(1000);
  d6:	68 ee       	ldi	r22, 0xE8	; 232
  d8:	73 e0       	ldi	r23, 0x03	; 3
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 5e 01 	call	0x2bc	; 0x2bc <TMR0_delayms>
		bcm_send_n(&str_bcm_instance_ch_0,"BCM Operating\r", 14);
  e2:	4e e0       	ldi	r20, 0x0E	; 14
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	66 e7       	ldi	r22, 0x76	; 118
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	81 e9       	ldi	r24, 0x91	; 145
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 48 03 	call	0x690	; 0x690 <bcm_send_n>
  f2:	08 95       	ret

000000f4 <APP1>:
	}
}

void APP1(void)
{
	bcm_dispatcher(&str_bcm_instance_ch_0);
  f4:	81 e9       	ldi	r24, 0x91	; 145
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 6f 03 	call	0x6de	; 0x6de <bcm_dispatcher>
  fc:	08 95       	ret

000000fe <LED_init>:
	else
	{
		error=1;
	}
	return error;
}
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setpindir>
 104:	81 11       	cpse	r24, r1
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret

0000010a <LED_TOGGLE>:

uint8_t LED_TOGGLE(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_togglepin(Port_number, Pin_number) == 0)
 10a:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_togglepin>
 10e:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
 110:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
 112:	08 95       	ret

00000114 <main>:
//#include <avr/io.h>
#include "APP/app.h"

int main(void)
{
	APP1_init();
 114:	0e 94 59 00 	call	0xb2	; 0xb2 <APP1_init>
    /* Replace with your application code */
    while (1) 
    {
		APP1();
 118:	0e 94 7a 00 	call	0xf4	; 0xf4 <APP1>
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x4>

0000011e <DIO_setpindir>:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
 11e:	44 23       	and	r20, r20
 120:	19 f0       	breq	.+6      	; 0x128 <DIO_setpindir+0xa>
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	e9 f1       	breq	.+122    	; 0x1a0 <DIO_setpindir+0x82>
 126:	74 c0       	rjmp	.+232    	; 0x210 <DIO_setpindir+0xf2>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	99 f0       	breq	.+38     	; 0x152 <DIO_setpindir+0x34>
 12c:	28 f0       	brcs	.+10     	; 0x138 <DIO_setpindir+0x1a>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	e9 f0       	breq	.+58     	; 0x16c <DIO_setpindir+0x4e>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	41 f1       	breq	.+80     	; 0x186 <DIO_setpindir+0x68>
 136:	6e c0       	rjmp	.+220    	; 0x214 <DIO_setpindir+0xf6>
 138:	2a b3       	in	r18, 0x1a	; 26
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_setpindir+0x26>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_setpindir+0x22>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	8a bb       	out	0x1a, r24	; 26
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_setpindir+0x40>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_setpindir+0x3c>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	87 bb       	out	0x17, r24	; 23
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	08 95       	ret
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_setpindir+0x5a>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_setpindir+0x56>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	84 bb       	out	0x14, r24	; 20
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_setpindir+0x74>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_setpindir+0x70>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	81 bb       	out	0x11, r24	; 17
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	91 f0       	breq	.+36     	; 0x1c8 <DIO_setpindir+0xaa>
 1a4:	28 f0       	brcs	.+10     	; 0x1b0 <DIO_setpindir+0x92>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	d9 f0       	breq	.+54     	; 0x1e0 <DIO_setpindir+0xc2>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	29 f1       	breq	.+74     	; 0x1f8 <DIO_setpindir+0xda>
 1ae:	34 c0       	rjmp	.+104    	; 0x218 <DIO_setpindir+0xfa>
 1b0:	2a b3       	in	r18, 0x1a	; 26
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_setpindir+0x9e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_setpindir+0x9a>
 1c0:	82 2b       	or	r24, r18
 1c2:	8a bb       	out	0x1a, r24	; 26
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret
 1c8:	27 b3       	in	r18, 0x17	; 23
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setpindir+0xb6>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setpindir+0xb2>
 1d8:	82 2b       	or	r24, r18
 1da:	87 bb       	out	0x17, r24	; 23
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret
 1e0:	24 b3       	in	r18, 0x14	; 20
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_setpindir+0xce>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_setpindir+0xca>
 1f0:	82 2b       	or	r24, r18
 1f2:	84 bb       	out	0x14, r24	; 20
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret
 1f8:	21 b3       	in	r18, 0x11	; 17
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_setpindir+0xe6>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_setpindir+0xe2>
 208:	82 2b       	or	r24, r18
 20a:	81 bb       	out	0x11, r24	; 17
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	08 95       	ret
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	08 95       	ret
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	08 95       	ret

0000021c <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	91 f0       	breq	.+36     	; 0x244 <DIO_togglepin+0x28>
 220:	28 f0       	brcs	.+10     	; 0x22c <DIO_togglepin+0x10>
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	d9 f0       	breq	.+54     	; 0x25c <DIO_togglepin+0x40>
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	29 f1       	breq	.+74     	; 0x274 <DIO_togglepin+0x58>
 22a:	30 c0       	rjmp	.+96     	; 0x28c <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
 22c:	2b b3       	in	r18, 0x1b	; 27
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_togglepin+0x1c>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_togglepin+0x18>
 23c:	82 27       	eor	r24, r18
 23e:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 240:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
 242:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
 244:	28 b3       	in	r18, 0x18	; 24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_togglepin+0x34>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_togglepin+0x30>
 254:	82 27       	eor	r24, r18
 256:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 258:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
 25a:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
 25c:	25 b3       	in	r18, 0x15	; 21
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_togglepin+0x4c>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_togglepin+0x48>
 26c:	82 27       	eor	r24, r18
 26e:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 270:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
 272:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
 274:	22 b3       	in	r18, 0x12	; 18
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_togglepin+0x64>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_togglepin+0x60>
 284:	82 27       	eor	r24, r18
 286:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 288:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
 28a:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
 28c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
 28e:	08 95       	ret

00000290 <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
 290:	83 b7       	in	r24, 0x33	; 51
 292:	81 60       	ori	r24, 0x01	; 1
 294:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 296:	83 b7       	in	r24, 0x33	; 51
 298:	8d 7f       	andi	r24, 0xFD	; 253
 29a:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 29c:	83 b7       	in	r24, 0x33	; 51
 29e:	8b 7f       	andi	r24, 0xFB	; 251
 2a0:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret

000002a6 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 2a6:	83 b7       	in	r24, 0x33	; 51
 2a8:	8e 7f       	andi	r24, 0xFE	; 254
 2aa:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 2ac:	83 b7       	in	r24, 0x33	; 51
 2ae:	8d 7f       	andi	r24, 0xFD	; 253
 2b0:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 2b2:	83 b7       	in	r24, 0x33	; 51
 2b4:	8b 7f       	andi	r24, 0xFB	; 251
 2b6:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret

000002bc <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.016);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
 2bc:	0e 94 28 04 	call	0x850	; 0x850 <__floatunsisf>
 2c0:	2f e6       	ldi	r18, 0x6F	; 111
 2c2:	32 e1       	ldi	r19, 0x12	; 18
 2c4:	43 e8       	ldi	r20, 0x83	; 131
 2c6:	5c e3       	ldi	r21, 0x3C	; 60
 2c8:	0e 94 87 03 	call	0x70e	; 0x70e <__divsf3>
 2cc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fixunssfsi>
 2d0:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <__data_end>
 2d4:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <__data_end+0x1>
 2d8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end+0x2>
 2dc:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 2e0:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 2e2:	0e 94 48 01 	call	0x290	; 0x290 <TMR0_start>
/** @return     TMR0_delay status                                              */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 2ec:	0a c0       	rjmp	.+20     	; 0x302 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 2ee:	08 b6       	in	r0, 0x38	; 56
 2f0:	00 fe       	sbrs	r0, 0
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 2f4:	88 b7       	in	r24, 0x38	; 56
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 2fa:	4f 5f       	subi	r20, 0xFF	; 255
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255
 2fe:	6f 4f       	sbci	r22, 0xFF	; 255
 300:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 302:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 306:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
 30a:	a0 91 96 00 	lds	r26, 0x0096	; 0x800096 <__data_end+0x2>
 30e:	b0 91 97 00 	lds	r27, 0x0097	; 0x800097 <__data_end+0x3>
 312:	48 17       	cp	r20, r24
 314:	59 07       	cpc	r21, r25
 316:	6a 07       	cpc	r22, r26
 318:	7b 07       	cpc	r23, r27
 31a:	48 f3       	brcs	.-46     	; 0x2ee <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 31c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
 320:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
 324:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end+0x2>
 328:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__data_end+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 32c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret

00000334 <UART_init>:
		}
		memcpy(u8_a_recstring, str_receive, receive_n>=a_n? a_n:receive_n);
		return receive_n>=a_n? a_n:receive_n;
	}
	return UART_VALID;
}
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setpindir>
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_setpindir>
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	19 f4       	brne	.+6      	; 0x35a <UART_init+0x26>
 354:	83 e3       	ldi	r24, 0x33	; 51
 356:	89 b9       	out	0x09, r24	; 9
 358:	0d c0       	rjmp	.+26     	; 0x374 <UART_init+0x40>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	19 f4       	brne	.+6      	; 0x364 <UART_init+0x30>
 35e:	8f ec       	ldi	r24, 0xCF	; 207
 360:	89 b9       	out	0x09, r24	; 9
 362:	08 c0       	rjmp	.+16     	; 0x374 <UART_init+0x40>
 364:	81 11       	cpse	r24, r1
 366:	02 c0       	rjmp	.+4      	; 0x36c <UART_init+0x38>
 368:	19 b8       	out	0x09, r1	; 9
 36a:	04 c0       	rjmp	.+8      	; 0x374 <UART_init+0x40>
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	11 f4       	brne	.+4      	; 0x374 <UART_init+0x40>
 370:	87 e0       	ldi	r24, 0x07	; 7
 372:	89 b9       	out	0x09, r24	; 9
 374:	8a b1       	in	r24, 0x0a	; 10
 376:	88 60       	ori	r24, 0x08	; 8
 378:	8a b9       	out	0x0a, r24	; 10
 37a:	8a b1       	in	r24, 0x0a	; 10
 37c:	80 61       	ori	r24, 0x10	; 16
 37e:	8a b9       	out	0x0a, r24	; 10
 380:	80 b5       	in	r24, 0x20	; 32
 382:	80 68       	ori	r24, 0x80	; 128
 384:	80 bd       	out	0x20, r24	; 32
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	81 11       	cpse	r24, r1
 38a:	0a c0       	rjmp	.+20     	; 0x3a0 <UART_init+0x6c>
 38c:	80 b5       	in	r24, 0x20	; 32
 38e:	8d 7f       	andi	r24, 0xFD	; 253
 390:	80 bd       	out	0x20, r24	; 32
 392:	80 b5       	in	r24, 0x20	; 32
 394:	8b 7f       	andi	r24, 0xFB	; 251
 396:	80 bd       	out	0x20, r24	; 32
 398:	8a b1       	in	r24, 0x0a	; 10
 39a:	8b 7f       	andi	r24, 0xFB	; 251
 39c:	8a b9       	out	0x0a, r24	; 10
 39e:	2f c0       	rjmp	.+94     	; 0x3fe <UART_init+0xca>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	51 f4       	brne	.+20     	; 0x3b8 <UART_init+0x84>
 3a4:	80 b5       	in	r24, 0x20	; 32
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	80 bd       	out	0x20, r24	; 32
 3aa:	80 b5       	in	r24, 0x20	; 32
 3ac:	8b 7f       	andi	r24, 0xFB	; 251
 3ae:	80 bd       	out	0x20, r24	; 32
 3b0:	8a b1       	in	r24, 0x0a	; 10
 3b2:	8b 7f       	andi	r24, 0xFB	; 251
 3b4:	8a b9       	out	0x0a, r24	; 10
 3b6:	23 c0       	rjmp	.+70     	; 0x3fe <UART_init+0xca>
 3b8:	82 30       	cpi	r24, 0x02	; 2
 3ba:	51 f4       	brne	.+20     	; 0x3d0 <UART_init+0x9c>
 3bc:	80 b5       	in	r24, 0x20	; 32
 3be:	8d 7f       	andi	r24, 0xFD	; 253
 3c0:	80 bd       	out	0x20, r24	; 32
 3c2:	80 b5       	in	r24, 0x20	; 32
 3c4:	84 60       	ori	r24, 0x04	; 4
 3c6:	80 bd       	out	0x20, r24	; 32
 3c8:	8a b1       	in	r24, 0x0a	; 10
 3ca:	8b 7f       	andi	r24, 0xFB	; 251
 3cc:	8a b9       	out	0x0a, r24	; 10
 3ce:	17 c0       	rjmp	.+46     	; 0x3fe <UART_init+0xca>
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	51 f4       	brne	.+20     	; 0x3e8 <UART_init+0xb4>
 3d4:	80 b5       	in	r24, 0x20	; 32
 3d6:	82 60       	ori	r24, 0x02	; 2
 3d8:	80 bd       	out	0x20, r24	; 32
 3da:	80 b5       	in	r24, 0x20	; 32
 3dc:	84 60       	ori	r24, 0x04	; 4
 3de:	80 bd       	out	0x20, r24	; 32
 3e0:	8a b1       	in	r24, 0x0a	; 10
 3e2:	8b 7f       	andi	r24, 0xFB	; 251
 3e4:	8a b9       	out	0x0a, r24	; 10
 3e6:	0b c0       	rjmp	.+22     	; 0x3fe <UART_init+0xca>
 3e8:	84 30       	cpi	r24, 0x04	; 4
 3ea:	49 f4       	brne	.+18     	; 0x3fe <UART_init+0xca>
 3ec:	80 b5       	in	r24, 0x20	; 32
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	80 bd       	out	0x20, r24	; 32
 3f2:	80 b5       	in	r24, 0x20	; 32
 3f4:	84 60       	ori	r24, 0x04	; 4
 3f6:	80 bd       	out	0x20, r24	; 32
 3f8:	8a b1       	in	r24, 0x0a	; 10
 3fa:	84 60       	ori	r24, 0x04	; 4
 3fc:	8a b9       	out	0x0a, r24	; 10
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	81 11       	cpse	r24, r1
 402:	07 c0       	rjmp	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	80 b5       	in	r24, 0x20	; 32
 406:	8f 7e       	andi	r24, 0xEF	; 239
 408:	80 bd       	out	0x20, r24	; 32
 40a:	80 b5       	in	r24, 0x20	; 32
 40c:	8f 7d       	andi	r24, 0xDF	; 223
 40e:	80 bd       	out	0x20, r24	; 32
 410:	11 c0       	rjmp	.+34     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	39 f4       	brne	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 416:	80 b5       	in	r24, 0x20	; 32
 418:	8f 7e       	andi	r24, 0xEF	; 239
 41a:	80 bd       	out	0x20, r24	; 32
 41c:	80 b5       	in	r24, 0x20	; 32
 41e:	80 62       	ori	r24, 0x20	; 32
 420:	80 bd       	out	0x20, r24	; 32
 422:	08 c0       	rjmp	.+16     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 424:	82 30       	cpi	r24, 0x02	; 2
 426:	31 f4       	brne	.+12     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 428:	80 b5       	in	r24, 0x20	; 32
 42a:	80 61       	ori	r24, 0x10	; 16
 42c:	80 bd       	out	0x20, r24	; 32
 42e:	80 b5       	in	r24, 0x20	; 32
 430:	80 62       	ori	r24, 0x20	; 32
 432:	80 bd       	out	0x20, r24	; 32
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	81 11       	cpse	r24, r1
 438:	04 c0       	rjmp	.+8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43a:	80 b5       	in	r24, 0x20	; 32
 43c:	87 7f       	andi	r24, 0xF7	; 247
 43e:	80 bd       	out	0x20, r24	; 32
 440:	05 c0       	rjmp	.+10     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	19 f4       	brne	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 446:	80 b5       	in	r24, 0x20	; 32
 448:	88 60       	ori	r24, 0x08	; 8
 44a:	80 bd       	out	0x20, r24	; 32
 44c:	80 b5       	in	r24, 0x20	; 32
 44e:	8f 7b       	andi	r24, 0xBF	; 191
 450:	80 bd       	out	0x20, r24	; 32
 452:	80 b5       	in	r24, 0x20	; 32
 454:	80 64       	ori	r24, 0x40	; 64
 456:	80 bd       	out	0x20, r24	; 32
 458:	88 81       	ld	r24, Y
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	21 f4       	brne	.+8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 45e:	8b b1       	in	r24, 0x0b	; 11
 460:	82 60       	ori	r24, 0x02	; 2
 462:	8b b9       	out	0x0b, r24	; 11
 464:	05 c0       	rjmp	.+10     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 466:	81 11       	cpse	r24, r1
 468:	03 c0       	rjmp	.+6      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46a:	8b b1       	in	r24, 0x0b	; 11
 46c:	8d 7f       	andi	r24, 0xFD	; 253
 46e:	8b b9       	out	0x0b, r24	; 11
 470:	8b b1       	in	r24, 0x0b	; 11
 472:	8e 7f       	andi	r24, 0xFE	; 254
 474:	8b b9       	out	0x0b, r24	; 11
 476:	8e 81       	ldd	r24, Y+6	; 0x06
 478:	81 11       	cpse	r24, r1
 47a:	04 c0       	rjmp	.+8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 47c:	8a b1       	in	r24, 0x0a	; 10
 47e:	80 68       	ori	r24, 0x80	; 128
 480:	8a b9       	out	0x0a, r24	; 10
 482:	05 c0       	rjmp	.+10     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	19 f4       	brne	.+6      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 488:	8a b1       	in	r24, 0x0a	; 10
 48a:	8f 77       	andi	r24, 0x7F	; 127
 48c:	8a b9       	out	0x0a, r24	; 10
 48e:	8d 81       	ldd	r24, Y+5	; 0x05
 490:	81 11       	cpse	r24, r1
 492:	04 c0       	rjmp	.+8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 494:	8a b1       	in	r24, 0x0a	; 10
 496:	80 64       	ori	r24, 0x40	; 64
 498:	8a b9       	out	0x0a, r24	; 10
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	19 f4       	brne	.+6      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a0:	8a b1       	in	r24, 0x0a	; 10
 4a2:	8f 7b       	andi	r24, 0xBF	; 191
 4a4:	8a b9       	out	0x0a, r24	; 10
 4a6:	8f 81       	ldd	r24, Y+7	; 0x07
 4a8:	81 11       	cpse	r24, r1
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4ac:	8a b1       	in	r24, 0x0a	; 10
 4ae:	80 62       	ori	r24, 0x20	; 32
 4b0:	8a b9       	out	0x0a, r24	; 10
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	19 f4       	brne	.+6      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b8:	8a b1       	in	r24, 0x0a	; 10
 4ba:	8f 7d       	andi	r24, 0xDF	; 223
 4bc:	8a b9       	out	0x0a, r24	; 10
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <UART_sendchar>:
 4c6:	5d 9b       	sbis	0x0b, 5	; 11
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <UART_sendchar>
 4ca:	8c b9       	out	0x0c, r24	; 12
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	08 95       	ret

000004d0 <UART_sendstr>:
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	8c 01       	movw	r16, r24
 4dc:	7b 01       	movw	r14, r22
 4de:	c0 e0       	ldi	r28, 0x00	; 0
 4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <UART_sendstr+0x18>
 4e2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <UART_sendchar>
 4e6:	cf 5f       	subi	r28, 0xFF	; 255
 4e8:	f8 01       	movw	r30, r16
 4ea:	ec 0f       	add	r30, r28
 4ec:	f1 1d       	adc	r31, r1
 4ee:	80 81       	ld	r24, Z
 4f0:	81 11       	cpse	r24, r1
 4f2:	f7 cf       	rjmp	.-18     	; 0x4e2 <UART_sendstr+0x12>
 4f4:	f0 92 9d 00 	sts	0x009D, r15	; 0x80009d <send_n+0x1>
 4f8:	e0 92 9c 00 	sts	0x009C, r14	; 0x80009c <send_n>
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	08 95       	ret

00000508 <UART_receivechar>:
 508:	5f 9b       	sbis	0x0b, 7	; 11
 50a:	fe cf       	rjmp	.-4      	; 0x508 <UART_receivechar>
 50c:	2c b1       	in	r18, 0x0c	; 12
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	08 95       	ret

00000516 <UART_dispatcher>:



uart_errorstatus UART_dispatcher(const str_UART_CONFG *ptr_str_bcm_meduim)
{
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
	static uint16_t i=0;
	static uint16_t j=0;
	if(ptr_str_bcm_meduim == NULL)
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	09 f4       	brne	.+2      	; 0x520 <UART_dispatcher+0xa>
 51e:	79 c0       	rjmp	.+242    	; 0x612 <UART_dispatcher+0xfc>
 520:	ec 01       	movw	r28, r24
	{
		return UART_NOT_VALID;
	}
	
	if((read_bit(UCSRA, 6) == 1 && i<send_n) || (i==0 && send_n>0))
 522:	5e 9b       	sbis	0x0b, 6	; 11
 524:	0b c0       	rjmp	.+22     	; 0x53c <UART_dispatcher+0x26>
 526:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <i.1738>
 52a:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <i.1738+0x1>
 52e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <send_n>
 532:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <send_n+0x1>
 536:	28 17       	cp	r18, r24
 538:	39 07       	cpc	r19, r25
 53a:	60 f0       	brcs	.+24     	; 0x554 <UART_dispatcher+0x3e>
 53c:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <i.1738>
 540:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <i.1738+0x1>
 544:	89 2b       	or	r24, r25
 546:	e1 f4       	brne	.+56     	; 0x580 <UART_dispatcher+0x6a>
 548:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <send_n>
 54c:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <send_n+0x1>
 550:	89 2b       	or	r24, r25
 552:	b1 f0       	breq	.+44     	; 0x580 <UART_dispatcher+0x6a>
	{
		set_bit(UCSRA,6);
 554:	8b b1       	in	r24, 0x0b	; 11
 556:	80 64       	ori	r24, 0x40	; 64
 558:	8b b9       	out	0x0b, r24	; 11
		bcm_send(str_send[i]);
 55a:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <i.1738>
 55e:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <i.1738+0x1>
 562:	ee 5f       	subi	r30, 0xFE	; 254
 564:	fe 4f       	sbci	r31, 0xFE	; 254
 566:	80 81       	ld	r24, Z
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 35 03 	call	0x66a	; 0x66a <bcm_send>
		i++;
 56e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <i.1738>
 572:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <i.1738+0x1>
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <i.1738+0x1>
 57c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <i.1738>
	}
	if(read_bit(UCSRA, 7) == 1)
 580:	5f 9b       	sbis	0x0b, 7	; 11
 582:	11 c0       	rjmp	.+34     	; 0x5a6 <UART_dispatcher+0x90>
	{
		bcm_receive(&str_receive[j]);
 584:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <j.1739>
 588:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <j.1739+0x1>
 58c:	82 56       	subi	r24, 0x62	; 98
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <bcm_receive>
		j++;
 594:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <j.1739>
 598:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <j.1739+0x1>
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <j.1739+0x1>
 5a2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <j.1739>
	}
	if(i!=0 && i==send_n)
 5a6:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <i.1738>
 5aa:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <i.1738+0x1>
 5ae:	00 97       	sbiw	r24, 0x00	; 0
 5b0:	91 f0       	breq	.+36     	; 0x5d6 <UART_dispatcher+0xc0>
 5b2:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <send_n>
 5b6:	30 91 9d 00 	lds	r19, 0x009D	; 0x80009d <send_n+0x1>
 5ba:	82 17       	cp	r24, r18
 5bc:	93 07       	cpc	r25, r19
 5be:	59 f4       	brne	.+22     	; 0x5d6 <UART_dispatcher+0xc0>
	{
		ptr_str_bcm_meduim->send_callback();
 5c0:	e8 85       	ldd	r30, Y+8	; 0x08
 5c2:	f9 85       	ldd	r31, Y+9	; 0x09
 5c4:	09 95       	icall
		i=0;
 5c6:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <i.1738+0x1>
 5ca:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <i.1738>
		send_n=0;
 5ce:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <send_n+0x1>
 5d2:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <send_n>
	}

	if(j>0 && str_receive[j-1]=='\r')
 5d6:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <j.1739>
 5da:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <j.1739+0x1>
 5de:	61 15       	cp	r22, r1
 5e0:	71 05       	cpc	r23, r1
 5e2:	c9 f0       	breq	.+50     	; 0x616 <UART_dispatcher+0x100>
 5e4:	cb 01       	movw	r24, r22
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	fc 01       	movw	r30, r24
 5ea:	e2 56       	subi	r30, 0x62	; 98
 5ec:	ff 4f       	sbci	r31, 0xFF	; 255
 5ee:	20 81       	ld	r18, Z
 5f0:	2d 30       	cpi	r18, 0x0D	; 13
 5f2:	99 f4       	brne	.+38     	; 0x61a <UART_dispatcher+0x104>
	{
		str_receive[j-1]='\0';
 5f4:	fc 01       	movw	r30, r24
 5f6:	e2 56       	subi	r30, 0x62	; 98
 5f8:	ff 4f       	sbci	r31, 0xFF	; 255
 5fa:	10 82       	st	Z, r1
		ptr_str_bcm_meduim->receive_callback(str_receive, j);
 5fc:	ea 85       	ldd	r30, Y+10	; 0x0a
 5fe:	fb 85       	ldd	r31, Y+11	; 0x0b
 600:	8e e9       	ldi	r24, 0x9E	; 158
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	09 95       	icall
		j=0;
 606:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <j.1739+0x1>
 60a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <j.1739>
	}
	return UART_VALID;
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	05 c0       	rjmp	.+10     	; 0x61c <UART_dispatcher+0x106>
{
	static uint16_t i=0;
	static uint16_t j=0;
	if(ptr_str_bcm_meduim == NULL)
	{
		return UART_NOT_VALID;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	03 c0       	rjmp	.+6      	; 0x61c <UART_dispatcher+0x106>
	{
		str_receive[j-1]='\0';
		ptr_str_bcm_meduim->receive_callback(str_receive, j);
		j=0;
	}
	return UART_VALID;
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	01 c0       	rjmp	.+2      	; 0x61c <UART_dispatcher+0x106>
 61a:	80 e0       	ldi	r24, 0x00	; 0
}
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <bcm_init>:
	else
	{
		return wrong_type_error;
	}
	return SUCCESS;
}
 622:	00 97       	sbiw	r24, 0x00	; 0
 624:	e1 f0       	breq	.+56     	; 0x65e <bcm_init+0x3c>
 626:	fc 01       	movw	r30, r24
 628:	20 81       	ld	r18, Z
 62a:	21 11       	cpse	r18, r1
 62c:	12 c0       	rjmp	.+36     	; 0x652 <bcm_init+0x30>
 62e:	a1 81       	ldd	r26, Z+1	; 0x01
 630:	b2 81       	ldd	r27, Z+2	; 0x02
 632:	1b 96       	adiw	r26, 0x0b	; 11
 634:	5c 93       	st	X, r21
 636:	4e 93       	st	-X, r20
 638:	1a 97       	sbiw	r26, 0x0a	; 10
 63a:	a1 81       	ldd	r26, Z+1	; 0x01
 63c:	b2 81       	ldd	r27, Z+2	; 0x02
 63e:	19 96       	adiw	r26, 0x09	; 9
 640:	7c 93       	st	X, r23
 642:	6e 93       	st	-X, r22
 644:	18 97       	sbiw	r26, 0x08	; 8
 646:	81 81       	ldd	r24, Z+1	; 0x01
 648:	92 81       	ldd	r25, Z+2	; 0x02
 64a:	0e 94 9a 01 	call	0x334	; 0x334 <UART_init>
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
 652:	22 30       	cpi	r18, 0x02	; 2
 654:	31 f0       	breq	.+12     	; 0x662 <bcm_init+0x40>
 656:	21 30       	cpi	r18, 0x01	; 1
 658:	31 f0       	breq	.+12     	; 0x666 <bcm_init+0x44>
 65a:	8b e0       	ldi	r24, 0x0B	; 11
 65c:	08 95       	ret
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	08 95       	ret
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	08 95       	ret
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	08 95       	ret

0000066a <bcm_send>:
 66a:	fc 01       	movw	r30, r24
 66c:	90 81       	ld	r25, Z
 66e:	91 11       	cpse	r25, r1
 670:	05 c0       	rjmp	.+10     	; 0x67c <bcm_send+0x12>
 672:	86 2f       	mov	r24, r22
 674:	0e 94 63 02 	call	0x4c6	; 0x4c6 <UART_sendchar>
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret
 67c:	92 30       	cpi	r25, 0x02	; 2
 67e:	21 f0       	breq	.+8      	; 0x688 <bcm_send+0x1e>
 680:	91 30       	cpi	r25, 0x01	; 1
 682:	21 f0       	breq	.+8      	; 0x68c <bcm_send+0x22>
 684:	8b e0       	ldi	r24, 0x0B	; 11
 686:	08 95       	ret
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	08 95       	ret
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	08 95       	ret

00000690 <bcm_send_n>:
 690:	fc 01       	movw	r30, r24
 692:	90 81       	ld	r25, Z
 694:	91 11       	cpse	r25, r1
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <bcm_send_n+0x14>
 698:	cb 01       	movw	r24, r22
 69a:	ba 01       	movw	r22, r20
 69c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <UART_sendstr>
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	08 95       	ret
 6a4:	92 30       	cpi	r25, 0x02	; 2
 6a6:	21 f0       	breq	.+8      	; 0x6b0 <bcm_send_n+0x20>
 6a8:	91 30       	cpi	r25, 0x01	; 1
 6aa:	21 f0       	breq	.+8      	; 0x6b4 <bcm_send_n+0x24>
 6ac:	8b e0       	ldi	r24, 0x0B	; 11
 6ae:	08 95       	ret
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	08 95       	ret
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	08 95       	ret

000006b8 <bcm_receive>:
 6b8:	fc 01       	movw	r30, r24
 6ba:	90 81       	ld	r25, Z
 6bc:	91 11       	cpse	r25, r1
 6be:	05 c0       	rjmp	.+10     	; 0x6ca <bcm_receive+0x12>
 6c0:	cb 01       	movw	r24, r22
 6c2:	0e 94 84 02 	call	0x508	; 0x508 <UART_receivechar>
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	08 95       	ret
 6ca:	92 30       	cpi	r25, 0x02	; 2
 6cc:	21 f0       	breq	.+8      	; 0x6d6 <bcm_receive+0x1e>
 6ce:	91 30       	cpi	r25, 0x01	; 1
 6d0:	21 f0       	breq	.+8      	; 0x6da <bcm_receive+0x22>
 6d2:	8b e0       	ldi	r24, 0x0B	; 11
 6d4:	08 95       	ret
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	08 95       	ret
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	08 95       	ret

000006de <bcm_dispatcher>:


enu_system_status_t bcm_dispatcher(const str_t_bcm_meduim_t* ptr_str_bcm_meduim)
{
	if(ptr_str_bcm_meduim == NULL)
 6de:	00 97       	sbiw	r24, 0x00	; 0
 6e0:	81 f0       	breq	.+32     	; 0x702 <bcm_dispatcher+0x24>
	{
		return null_pointer_error;
	}
	if(ptr_str_bcm_meduim->comunication_meduim==UART)
 6e2:	fc 01       	movw	r30, r24
 6e4:	20 81       	ld	r18, Z
 6e6:	21 11       	cpse	r18, r1
 6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <bcm_dispatcher+0x18>
	{
		UART_dispatcher(ptr_str_bcm_meduim->bcm_properties);
 6ea:	81 81       	ldd	r24, Z+1	; 0x01
 6ec:	92 81       	ldd	r25, Z+2	; 0x02
 6ee:	0e 94 8b 02 	call	0x516	; 0x516 <UART_dispatcher>
	}
	else
	{
		return wrong_type_error;
	}
	return SUCCESS;
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret
	{
		UART_dispatcher(ptr_str_bcm_meduim->bcm_properties);
	}
		
	
	else if(ptr_str_bcm_meduim->comunication_meduim==I2C)
 6f6:	22 30       	cpi	r18, 0x02	; 2
 6f8:	31 f0       	breq	.+12     	; 0x706 <bcm_dispatcher+0x28>
	{
		//to do handling I2C
	}
	else if(ptr_str_bcm_meduim->comunication_meduim==SPI)
 6fa:	21 30       	cpi	r18, 0x01	; 1
 6fc:	31 f0       	breq	.+12     	; 0x70a <bcm_dispatcher+0x2c>
	{
		//to do handling SPI
	}
	else
	{
		return wrong_type_error;
 6fe:	8b e0       	ldi	r24, 0x0B	; 11
 700:	08 95       	ret

enu_system_status_t bcm_dispatcher(const str_t_bcm_meduim_t* ptr_str_bcm_meduim)
{
	if(ptr_str_bcm_meduim == NULL)
	{
		return null_pointer_error;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	08 95       	ret
	}
	else
	{
		return wrong_type_error;
	}
	return SUCCESS;
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	08 95       	ret
 70a:	80 e0       	ldi	r24, 0x00	; 0
}
 70c:	08 95       	ret

0000070e <__divsf3>:
 70e:	0e 94 9b 03 	call	0x736	; 0x736 <__divsf3x>
 712:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_round>
 716:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_pscB>
 71a:	58 f0       	brcs	.+22     	; 0x732 <__divsf3+0x24>
 71c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_pscA>
 720:	40 f0       	brcs	.+16     	; 0x732 <__divsf3+0x24>
 722:	29 f4       	brne	.+10     	; 0x72e <__divsf3+0x20>
 724:	5f 3f       	cpi	r21, 0xFF	; 255
 726:	29 f0       	breq	.+10     	; 0x732 <__divsf3+0x24>
 728:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_inf>
 72c:	51 11       	cpse	r21, r1
 72e:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_szero>
 732:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__fp_nan>

00000736 <__divsf3x>:
 736:	0e 94 8d 04 	call	0x91a	; 0x91a <__fp_split3>
 73a:	68 f3       	brcs	.-38     	; 0x716 <__divsf3+0x8>

0000073c <__divsf3_pse>:
 73c:	99 23       	and	r25, r25
 73e:	b1 f3       	breq	.-20     	; 0x72c <__divsf3+0x1e>
 740:	55 23       	and	r21, r21
 742:	91 f3       	breq	.-28     	; 0x728 <__divsf3+0x1a>
 744:	95 1b       	sub	r25, r21
 746:	55 0b       	sbc	r21, r21
 748:	bb 27       	eor	r27, r27
 74a:	aa 27       	eor	r26, r26
 74c:	62 17       	cp	r22, r18
 74e:	73 07       	cpc	r23, r19
 750:	84 07       	cpc	r24, r20
 752:	38 f0       	brcs	.+14     	; 0x762 <__divsf3_pse+0x26>
 754:	9f 5f       	subi	r25, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	22 0f       	add	r18, r18
 75a:	33 1f       	adc	r19, r19
 75c:	44 1f       	adc	r20, r20
 75e:	aa 1f       	adc	r26, r26
 760:	a9 f3       	breq	.-22     	; 0x74c <__divsf3_pse+0x10>
 762:	35 d0       	rcall	.+106    	; 0x7ce <__divsf3_pse+0x92>
 764:	0e 2e       	mov	r0, r30
 766:	3a f0       	brmi	.+14     	; 0x776 <__divsf3_pse+0x3a>
 768:	e0 e8       	ldi	r30, 0x80	; 128
 76a:	32 d0       	rcall	.+100    	; 0x7d0 <__divsf3_pse+0x94>
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	50 40       	sbci	r21, 0x00	; 0
 770:	e6 95       	lsr	r30
 772:	00 1c       	adc	r0, r0
 774:	ca f7       	brpl	.-14     	; 0x768 <__divsf3_pse+0x2c>
 776:	2b d0       	rcall	.+86     	; 0x7ce <__divsf3_pse+0x92>
 778:	fe 2f       	mov	r31, r30
 77a:	29 d0       	rcall	.+82     	; 0x7ce <__divsf3_pse+0x92>
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	bb 1f       	adc	r27, r27
 784:	26 17       	cp	r18, r22
 786:	37 07       	cpc	r19, r23
 788:	48 07       	cpc	r20, r24
 78a:	ab 07       	cpc	r26, r27
 78c:	b0 e8       	ldi	r27, 0x80	; 128
 78e:	09 f0       	breq	.+2      	; 0x792 <__divsf3_pse+0x56>
 790:	bb 0b       	sbc	r27, r27
 792:	80 2d       	mov	r24, r0
 794:	bf 01       	movw	r22, r30
 796:	ff 27       	eor	r31, r31
 798:	93 58       	subi	r25, 0x83	; 131
 79a:	5f 4f       	sbci	r21, 0xFF	; 255
 79c:	3a f0       	brmi	.+14     	; 0x7ac <__divsf3_pse+0x70>
 79e:	9e 3f       	cpi	r25, 0xFE	; 254
 7a0:	51 05       	cpc	r21, r1
 7a2:	78 f0       	brcs	.+30     	; 0x7c2 <__divsf3_pse+0x86>
 7a4:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_inf>
 7a8:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_szero>
 7ac:	5f 3f       	cpi	r21, 0xFF	; 255
 7ae:	e4 f3       	brlt	.-8      	; 0x7a8 <__divsf3_pse+0x6c>
 7b0:	98 3e       	cpi	r25, 0xE8	; 232
 7b2:	d4 f3       	brlt	.-12     	; 0x7a8 <__divsf3_pse+0x6c>
 7b4:	86 95       	lsr	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	b7 95       	ror	r27
 7bc:	f7 95       	ror	r31
 7be:	9f 5f       	subi	r25, 0xFF	; 255
 7c0:	c9 f7       	brne	.-14     	; 0x7b4 <__divsf3_pse+0x78>
 7c2:	88 0f       	add	r24, r24
 7c4:	91 1d       	adc	r25, r1
 7c6:	96 95       	lsr	r25
 7c8:	87 95       	ror	r24
 7ca:	97 f9       	bld	r25, 7
 7cc:	08 95       	ret
 7ce:	e1 e0       	ldi	r30, 0x01	; 1
 7d0:	66 0f       	add	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	bb 1f       	adc	r27, r27
 7d8:	62 17       	cp	r22, r18
 7da:	73 07       	cpc	r23, r19
 7dc:	84 07       	cpc	r24, r20
 7de:	ba 07       	cpc	r27, r26
 7e0:	20 f0       	brcs	.+8      	; 0x7ea <__divsf3_pse+0xae>
 7e2:	62 1b       	sub	r22, r18
 7e4:	73 0b       	sbc	r23, r19
 7e6:	84 0b       	sbc	r24, r20
 7e8:	ba 0b       	sbc	r27, r26
 7ea:	ee 1f       	adc	r30, r30
 7ec:	88 f7       	brcc	.-30     	; 0x7d0 <__divsf3_pse+0x94>
 7ee:	e0 95       	com	r30
 7f0:	08 95       	ret

000007f2 <__fixunssfsi>:
 7f2:	0e 94 95 04 	call	0x92a	; 0x92a <__fp_splitA>
 7f6:	88 f0       	brcs	.+34     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7f8:	9f 57       	subi	r25, 0x7F	; 127
 7fa:	98 f0       	brcs	.+38     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7fc:	b9 2f       	mov	r27, r25
 7fe:	99 27       	eor	r25, r25
 800:	b7 51       	subi	r27, 0x17	; 23
 802:	b0 f0       	brcs	.+44     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 804:	e1 f0       	breq	.+56     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 806:	66 0f       	add	r22, r22
 808:	77 1f       	adc	r23, r23
 80a:	88 1f       	adc	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	1a f0       	brmi	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	ba 95       	dec	r27
 812:	c9 f7       	brne	.-14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 814:	14 c0       	rjmp	.+40     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 816:	b1 30       	cpi	r27, 0x01	; 1
 818:	91 f0       	breq	.+36     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 81a:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_zero>
 81e:	b1 e0       	ldi	r27, 0x01	; 1
 820:	08 95       	ret
 822:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_zero>
 826:	67 2f       	mov	r22, r23
 828:	78 2f       	mov	r23, r24
 82a:	88 27       	eor	r24, r24
 82c:	b8 5f       	subi	r27, 0xF8	; 248
 82e:	39 f0       	breq	.+14     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 830:	b9 3f       	cpi	r27, 0xF9	; 249
 832:	cc f3       	brlt	.-14     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 834:	86 95       	lsr	r24
 836:	77 95       	ror	r23
 838:	67 95       	ror	r22
 83a:	b3 95       	inc	r27
 83c:	d9 f7       	brne	.-10     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 83e:	3e f4       	brtc	.+14     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 840:	90 95       	com	r25
 842:	80 95       	com	r24
 844:	70 95       	com	r23
 846:	61 95       	neg	r22
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	08 95       	ret

00000850 <__floatunsisf>:
 850:	e8 94       	clt
 852:	09 c0       	rjmp	.+18     	; 0x866 <__stack+0x7>

00000854 <__floatsisf>:
 854:	97 fb       	bst	r25, 7
 856:	3e f4       	brtc	.+14     	; 0x866 <__stack+0x7>
 858:	90 95       	com	r25
 85a:	80 95       	com	r24
 85c:	70 95       	com	r23
 85e:	61 95       	neg	r22
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	99 23       	and	r25, r25
 868:	a9 f0       	breq	.+42     	; 0x894 <__stack+0x35>
 86a:	f9 2f       	mov	r31, r25
 86c:	96 e9       	ldi	r25, 0x96	; 150
 86e:	bb 27       	eor	r27, r27
 870:	93 95       	inc	r25
 872:	f6 95       	lsr	r31
 874:	87 95       	ror	r24
 876:	77 95       	ror	r23
 878:	67 95       	ror	r22
 87a:	b7 95       	ror	r27
 87c:	f1 11       	cpse	r31, r1
 87e:	f8 cf       	rjmp	.-16     	; 0x870 <__stack+0x11>
 880:	fa f4       	brpl	.+62     	; 0x8c0 <__stack+0x61>
 882:	bb 0f       	add	r27, r27
 884:	11 f4       	brne	.+4      	; 0x88a <__stack+0x2b>
 886:	60 ff       	sbrs	r22, 0
 888:	1b c0       	rjmp	.+54     	; 0x8c0 <__stack+0x61>
 88a:	6f 5f       	subi	r22, 0xFF	; 255
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	16 c0       	rjmp	.+44     	; 0x8c0 <__stack+0x61>
 894:	88 23       	and	r24, r24
 896:	11 f0       	breq	.+4      	; 0x89c <__stack+0x3d>
 898:	96 e9       	ldi	r25, 0x96	; 150
 89a:	11 c0       	rjmp	.+34     	; 0x8be <__stack+0x5f>
 89c:	77 23       	and	r23, r23
 89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
 8a0:	9e e8       	ldi	r25, 0x8E	; 142
 8a2:	87 2f       	mov	r24, r23
 8a4:	76 2f       	mov	r23, r22
 8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <__stack+0x53>
 8a8:	66 23       	and	r22, r22
 8aa:	71 f0       	breq	.+28     	; 0x8c8 <__stack+0x69>
 8ac:	96 e8       	ldi	r25, 0x86	; 134
 8ae:	86 2f       	mov	r24, r22
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	2a f0       	brmi	.+10     	; 0x8c0 <__stack+0x61>
 8b6:	9a 95       	dec	r25
 8b8:	66 0f       	add	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	da f7       	brpl	.-10     	; 0x8b6 <__stack+0x57>
 8c0:	88 0f       	add	r24, r24
 8c2:	96 95       	lsr	r25
 8c4:	87 95       	ror	r24
 8c6:	97 f9       	bld	r25, 7
 8c8:	08 95       	ret

000008ca <__fp_inf>:
 8ca:	97 f9       	bld	r25, 7
 8cc:	9f 67       	ori	r25, 0x7F	; 127
 8ce:	80 e8       	ldi	r24, 0x80	; 128
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	08 95       	ret

000008d6 <__fp_nan>:
 8d6:	9f ef       	ldi	r25, 0xFF	; 255
 8d8:	80 ec       	ldi	r24, 0xC0	; 192
 8da:	08 95       	ret

000008dc <__fp_pscA>:
 8dc:	00 24       	eor	r0, r0
 8de:	0a 94       	dec	r0
 8e0:	16 16       	cp	r1, r22
 8e2:	17 06       	cpc	r1, r23
 8e4:	18 06       	cpc	r1, r24
 8e6:	09 06       	cpc	r0, r25
 8e8:	08 95       	ret

000008ea <__fp_pscB>:
 8ea:	00 24       	eor	r0, r0
 8ec:	0a 94       	dec	r0
 8ee:	12 16       	cp	r1, r18
 8f0:	13 06       	cpc	r1, r19
 8f2:	14 06       	cpc	r1, r20
 8f4:	05 06       	cpc	r0, r21
 8f6:	08 95       	ret

000008f8 <__fp_round>:
 8f8:	09 2e       	mov	r0, r25
 8fa:	03 94       	inc	r0
 8fc:	00 0c       	add	r0, r0
 8fe:	11 f4       	brne	.+4      	; 0x904 <__fp_round+0xc>
 900:	88 23       	and	r24, r24
 902:	52 f0       	brmi	.+20     	; 0x918 <__fp_round+0x20>
 904:	bb 0f       	add	r27, r27
 906:	40 f4       	brcc	.+16     	; 0x918 <__fp_round+0x20>
 908:	bf 2b       	or	r27, r31
 90a:	11 f4       	brne	.+4      	; 0x910 <__fp_round+0x18>
 90c:	60 ff       	sbrs	r22, 0
 90e:	04 c0       	rjmp	.+8      	; 0x918 <__fp_round+0x20>
 910:	6f 5f       	subi	r22, 0xFF	; 255
 912:	7f 4f       	sbci	r23, 0xFF	; 255
 914:	8f 4f       	sbci	r24, 0xFF	; 255
 916:	9f 4f       	sbci	r25, 0xFF	; 255
 918:	08 95       	ret

0000091a <__fp_split3>:
 91a:	57 fd       	sbrc	r21, 7
 91c:	90 58       	subi	r25, 0x80	; 128
 91e:	44 0f       	add	r20, r20
 920:	55 1f       	adc	r21, r21
 922:	59 f0       	breq	.+22     	; 0x93a <__fp_splitA+0x10>
 924:	5f 3f       	cpi	r21, 0xFF	; 255
 926:	71 f0       	breq	.+28     	; 0x944 <__fp_splitA+0x1a>
 928:	47 95       	ror	r20

0000092a <__fp_splitA>:
 92a:	88 0f       	add	r24, r24
 92c:	97 fb       	bst	r25, 7
 92e:	99 1f       	adc	r25, r25
 930:	61 f0       	breq	.+24     	; 0x94a <__fp_splitA+0x20>
 932:	9f 3f       	cpi	r25, 0xFF	; 255
 934:	79 f0       	breq	.+30     	; 0x954 <__fp_splitA+0x2a>
 936:	87 95       	ror	r24
 938:	08 95       	ret
 93a:	12 16       	cp	r1, r18
 93c:	13 06       	cpc	r1, r19
 93e:	14 06       	cpc	r1, r20
 940:	55 1f       	adc	r21, r21
 942:	f2 cf       	rjmp	.-28     	; 0x928 <__fp_split3+0xe>
 944:	46 95       	lsr	r20
 946:	f1 df       	rcall	.-30     	; 0x92a <__fp_splitA>
 948:	08 c0       	rjmp	.+16     	; 0x95a <__fp_splitA+0x30>
 94a:	16 16       	cp	r1, r22
 94c:	17 06       	cpc	r1, r23
 94e:	18 06       	cpc	r1, r24
 950:	99 1f       	adc	r25, r25
 952:	f1 cf       	rjmp	.-30     	; 0x936 <__fp_splitA+0xc>
 954:	86 95       	lsr	r24
 956:	71 05       	cpc	r23, r1
 958:	61 05       	cpc	r22, r1
 95a:	08 94       	sec
 95c:	08 95       	ret

0000095e <__fp_zero>:
 95e:	e8 94       	clt

00000960 <__fp_szero>:
 960:	bb 27       	eor	r27, r27
 962:	66 27       	eor	r22, r22
 964:	77 27       	eor	r23, r23
 966:	cb 01       	movw	r24, r22
 968:	97 f9       	bld	r25, 7
 96a:	08 95       	ret

0000096c <strcmp>:
 96c:	fb 01       	movw	r30, r22
 96e:	dc 01       	movw	r26, r24
 970:	8d 91       	ld	r24, X+
 972:	01 90       	ld	r0, Z+
 974:	80 19       	sub	r24, r0
 976:	01 10       	cpse	r0, r1
 978:	d9 f3       	breq	.-10     	; 0x970 <strcmp+0x4>
 97a:	99 0b       	sbc	r25, r25
 97c:	08 95       	ret

0000097e <_exit>:
 97e:	f8 94       	cli

00000980 <__stop_program>:
 980:	ff cf       	rjmp	.-2      	; 0x980 <__stop_program>
