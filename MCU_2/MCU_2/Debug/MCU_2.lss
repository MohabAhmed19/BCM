
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000980  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d2  00800094  00800094  00000a48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024d5  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e43  00000000  00000000  00003179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011a3  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00005160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bac  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000130b  00000000  00000000  00006008  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 89 00 	call	0x112	; 0x112 <main>
  8a:	0c 94 be 04 	jmp	0x97c	; 0x97c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <send_callback>:
 */ 
#include "app.h"

void send_callback(void)
{
	DIO_togglepin(DIO_PORTC, DIO_PIN0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_togglepin>
  9a:	08 95       	ret

0000009c <receive_callback>:
}

void receive_callback(uint8_t *ptr,int n_data)
{
	if(!strcmp(ptr,"BCM Operating"))
  9c:	60 e6       	ldi	r22, 0x60	; 96
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	0e 94 b5 04 	call	0x96a	; 0x96a <strcmp>
  a4:	89 2b       	or	r24, r25
  a6:	91 f4       	brne	.+36     	; 0xcc <receive_callback+0x30>
	{
		DIO_togglepin(DIO_PORTC, DIO_PIN1);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_togglepin>
		TMR0_delayms(500);
  b0:	64 ef       	ldi	r22, 0xF4	; 244
  b2:	71 e0       	ldi	r23, 0x01	; 1
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <TMR0_delayms>
		bcm_send_n(&str_bcm_instance_ch_0,"Confirm BCM operating\r",22);
  bc:	46 e1       	ldi	r20, 0x16	; 22
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	6e e6       	ldi	r22, 0x6E	; 110
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	81 e9       	ldi	r24, 0x91	; 145
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 47 03 	call	0x68e	; 0x68e <bcm_send_n>
  cc:	08 95       	ret

000000ce <APP2_init>:

void APP2_init(void)
{

	
	if(SUCCESS ==bcm_init(&str_bcm_instance_ch_0,send_callback,receive_callback))
  ce:	4e e4       	ldi	r20, 0x4E	; 78
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	69 e4       	ldi	r22, 0x49	; 73
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	81 e9       	ldi	r24, 0x91	; 145
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 10 03 	call	0x620	; 0x620 <bcm_init>
  de:	81 11       	cpse	r24, r1
  e0:	0c c0       	rjmp	.+24     	; 0xfa <APP2_init+0x2c>
	{
		LED_init(DIO_PORTC, DIO_PIN0);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 83 00 	call	0x106	; 0x106 <LED_init>
		LED_init(DIO_PORTC, DIO_PIN1);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 83 00 	call	0x106	; 0x106 <LED_init>
  fa:	08 95       	ret

000000fc <APP2>:
	}
}

void APP2(void)
{
	bcm_dispatcher(&str_bcm_instance_ch_0);
  fc:	81 e9       	ldi	r24, 0x91	; 145
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 6e 03 	call	0x6dc	; 0x6dc <bcm_dispatcher>
 104:	08 95       	ret

00000106 <LED_init>:


uint8_t LED_init(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_setpindir(Port_number, Pin_number, DIO_PIN_OUTPUT) == 0 )
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	0e 94 8e 00 	call	0x11c	; 0x11c <DIO_setpindir>
 10c:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
 110:	08 95       	ret

00000112 <main>:
//#include <avr/io.h>
#include "APP/app.h"	

int main(void)
{
	APP2_init();
 112:	0e 94 67 00 	call	0xce	; 0xce <APP2_init>
    /* Replace with your application code */
    while (1) 
    {
		APP2();
 116:	0e 94 7e 00 	call	0xfc	; 0xfc <APP2>
 11a:	fd cf       	rjmp	.-6      	; 0x116 <main+0x4>

0000011c <DIO_setpindir>:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
 11c:	44 23       	and	r20, r20
 11e:	19 f0       	breq	.+6      	; 0x126 <DIO_setpindir+0xa>
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	e9 f1       	breq	.+122    	; 0x19e <DIO_setpindir+0x82>
 124:	74 c0       	rjmp	.+232    	; 0x20e <DIO_setpindir+0xf2>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	99 f0       	breq	.+38     	; 0x150 <DIO_setpindir+0x34>
 12a:	28 f0       	brcs	.+10     	; 0x136 <DIO_setpindir+0x1a>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	e9 f0       	breq	.+58     	; 0x16a <DIO_setpindir+0x4e>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	41 f1       	breq	.+80     	; 0x184 <DIO_setpindir+0x68>
 134:	6e c0       	rjmp	.+220    	; 0x212 <DIO_setpindir+0xf6>
 136:	2a b3       	in	r18, 0x1a	; 26
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_setpindir+0x26>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_setpindir+0x22>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	8a bb       	out	0x1a, r24	; 26
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret
 150:	27 b3       	in	r18, 0x17	; 23
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setpindir+0x40>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setpindir+0x3c>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	87 bb       	out	0x17, r24	; 23
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_setpindir+0x5a>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_setpindir+0x56>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret
 184:	21 b3       	in	r18, 0x11	; 17
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_setpindir+0x74>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_setpindir+0x70>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	81 bb       	out	0x11, r24	; 17
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	91 f0       	breq	.+36     	; 0x1c6 <DIO_setpindir+0xaa>
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <DIO_setpindir+0x92>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	d9 f0       	breq	.+54     	; 0x1de <DIO_setpindir+0xc2>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	29 f1       	breq	.+74     	; 0x1f6 <DIO_setpindir+0xda>
 1ac:	34 c0       	rjmp	.+104    	; 0x216 <DIO_setpindir+0xfa>
 1ae:	2a b3       	in	r18, 0x1a	; 26
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_setpindir+0x9e>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_setpindir+0x9a>
 1be:	82 2b       	or	r24, r18
 1c0:	8a bb       	out	0x1a, r24	; 26
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
 1c6:	27 b3       	in	r18, 0x17	; 23
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_setpindir+0xb6>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_setpindir+0xb2>
 1d6:	82 2b       	or	r24, r18
 1d8:	87 bb       	out	0x17, r24	; 23
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret
 1de:	24 b3       	in	r18, 0x14	; 20
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setpindir+0xce>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setpindir+0xca>
 1ee:	82 2b       	or	r24, r18
 1f0:	84 bb       	out	0x14, r24	; 20
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret
 1f6:	21 b3       	in	r18, 0x11	; 17
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_setpindir+0xe6>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_setpindir+0xe2>
 206:	82 2b       	or	r24, r18
 208:	81 bb       	out	0x11, r24	; 17
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	08 95       	ret
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	08 95       	ret

0000021a <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	91 f0       	breq	.+36     	; 0x242 <DIO_togglepin+0x28>
 21e:	28 f0       	brcs	.+10     	; 0x22a <DIO_togglepin+0x10>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	d9 f0       	breq	.+54     	; 0x25a <DIO_togglepin+0x40>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	29 f1       	breq	.+74     	; 0x272 <DIO_togglepin+0x58>
 228:	30 c0       	rjmp	.+96     	; 0x28a <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
 22a:	2b b3       	in	r18, 0x1b	; 27
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_togglepin+0x1c>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_togglepin+0x18>
 23a:	82 27       	eor	r24, r18
 23c:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 23e:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
 240:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
 242:	28 b3       	in	r18, 0x18	; 24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_togglepin+0x34>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_togglepin+0x30>
 252:	82 27       	eor	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 256:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
 258:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
 25a:	25 b3       	in	r18, 0x15	; 21
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_togglepin+0x4c>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_togglepin+0x48>
 26a:	82 27       	eor	r24, r18
 26c:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 26e:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
 270:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
 272:	22 b3       	in	r18, 0x12	; 18
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_togglepin+0x64>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_togglepin+0x60>
 282:	82 27       	eor	r24, r18
 284:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 286:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
 288:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
 28a:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
 28c:	08 95       	ret

0000028e <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
 28e:	83 b7       	in	r24, 0x33	; 51
 290:	81 60       	ori	r24, 0x01	; 1
 292:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 294:	83 b7       	in	r24, 0x33	; 51
 296:	8d 7f       	andi	r24, 0xFD	; 253
 298:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 29a:	83 b7       	in	r24, 0x33	; 51
 29c:	8b 7f       	andi	r24, 0xFB	; 251
 29e:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	08 95       	ret

000002a4 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 2a4:	83 b7       	in	r24, 0x33	; 51
 2a6:	8e 7f       	andi	r24, 0xFE	; 254
 2a8:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 2aa:	83 b7       	in	r24, 0x33	; 51
 2ac:	8d 7f       	andi	r24, 0xFD	; 253
 2ae:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 2b0:	83 b7       	in	r24, 0x33	; 51
 2b2:	8b 7f       	andi	r24, 0xFB	; 251
 2b4:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret

000002ba <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.016);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
 2ba:	0e 94 27 04 	call	0x84e	; 0x84e <__floatunsisf>
 2be:	2f e6       	ldi	r18, 0x6F	; 111
 2c0:	32 e1       	ldi	r19, 0x12	; 18
 2c2:	43 e8       	ldi	r20, 0x83	; 131
 2c4:	5c e3       	ldi	r21, 0x3C	; 60
 2c6:	0e 94 86 03 	call	0x70c	; 0x70c <__divsf3>
 2ca:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__fixunssfsi>
 2ce:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <__data_end>
 2d2:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <__data_end+0x1>
 2d6:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end+0x2>
 2da:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 2de:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 2e0:	0e 94 47 01 	call	0x28e	; 0x28e <TMR0_start>
/** @return     TMR0_delay status                                              */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 2ea:	0a c0       	rjmp	.+20     	; 0x300 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 2ec:	08 b6       	in	r0, 0x38	; 56
 2ee:	00 fe       	sbrs	r0, 0
 2f0:	fd cf       	rjmp	.-6      	; 0x2ec <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 2f2:	88 b7       	in	r24, 0x38	; 56
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 2f8:	4f 5f       	subi	r20, 0xFF	; 255
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	6f 4f       	sbci	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 300:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 304:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
 308:	a0 91 96 00 	lds	r26, 0x0096	; 0x800096 <__data_end+0x2>
 30c:	b0 91 97 00 	lds	r27, 0x0097	; 0x800097 <__data_end+0x3>
 310:	48 17       	cp	r20, r24
 312:	59 07       	cpc	r21, r25
 314:	6a 07       	cpc	r22, r26
 316:	7b 07       	cpc	r23, r27
 318:	48 f3       	brcs	.-46     	; 0x2ec <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 31a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
 31e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
 322:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end+0x2>
 326:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__data_end+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 32a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret

00000332 <UART_init>:
		}
		memcpy(u8_a_recstring, str_receive, receive_n>=a_n? a_n:receive_n);
		return receive_n>=a_n? a_n:receive_n;
	}
	return UART_VALID;
}
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ec 01       	movw	r28, r24
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	0e 94 8e 00 	call	0x11c	; 0x11c <DIO_setpindir>
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	0e 94 8e 00 	call	0x11c	; 0x11c <DIO_setpindir>
 34c:	8c 81       	ldd	r24, Y+4	; 0x04
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	19 f4       	brne	.+6      	; 0x358 <UART_init+0x26>
 352:	83 e3       	ldi	r24, 0x33	; 51
 354:	89 b9       	out	0x09, r24	; 9
 356:	0d c0       	rjmp	.+26     	; 0x372 <UART_init+0x40>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	19 f4       	brne	.+6      	; 0x362 <UART_init+0x30>
 35c:	8f ec       	ldi	r24, 0xCF	; 207
 35e:	89 b9       	out	0x09, r24	; 9
 360:	08 c0       	rjmp	.+16     	; 0x372 <UART_init+0x40>
 362:	81 11       	cpse	r24, r1
 364:	02 c0       	rjmp	.+4      	; 0x36a <UART_init+0x38>
 366:	19 b8       	out	0x09, r1	; 9
 368:	04 c0       	rjmp	.+8      	; 0x372 <UART_init+0x40>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	11 f4       	brne	.+4      	; 0x372 <UART_init+0x40>
 36e:	87 e0       	ldi	r24, 0x07	; 7
 370:	89 b9       	out	0x09, r24	; 9
 372:	8a b1       	in	r24, 0x0a	; 10
 374:	88 60       	ori	r24, 0x08	; 8
 376:	8a b9       	out	0x0a, r24	; 10
 378:	8a b1       	in	r24, 0x0a	; 10
 37a:	80 61       	ori	r24, 0x10	; 16
 37c:	8a b9       	out	0x0a, r24	; 10
 37e:	80 b5       	in	r24, 0x20	; 32
 380:	80 68       	ori	r24, 0x80	; 128
 382:	80 bd       	out	0x20, r24	; 32
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	81 11       	cpse	r24, r1
 388:	0a c0       	rjmp	.+20     	; 0x39e <UART_init+0x6c>
 38a:	80 b5       	in	r24, 0x20	; 32
 38c:	8d 7f       	andi	r24, 0xFD	; 253
 38e:	80 bd       	out	0x20, r24	; 32
 390:	80 b5       	in	r24, 0x20	; 32
 392:	8b 7f       	andi	r24, 0xFB	; 251
 394:	80 bd       	out	0x20, r24	; 32
 396:	8a b1       	in	r24, 0x0a	; 10
 398:	8b 7f       	andi	r24, 0xFB	; 251
 39a:	8a b9       	out	0x0a, r24	; 10
 39c:	2f c0       	rjmp	.+94     	; 0x3fc <UART_init+0xca>
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	51 f4       	brne	.+20     	; 0x3b6 <UART_init+0x84>
 3a2:	80 b5       	in	r24, 0x20	; 32
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	80 bd       	out	0x20, r24	; 32
 3a8:	80 b5       	in	r24, 0x20	; 32
 3aa:	8b 7f       	andi	r24, 0xFB	; 251
 3ac:	80 bd       	out	0x20, r24	; 32
 3ae:	8a b1       	in	r24, 0x0a	; 10
 3b0:	8b 7f       	andi	r24, 0xFB	; 251
 3b2:	8a b9       	out	0x0a, r24	; 10
 3b4:	23 c0       	rjmp	.+70     	; 0x3fc <UART_init+0xca>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	51 f4       	brne	.+20     	; 0x3ce <UART_init+0x9c>
 3ba:	80 b5       	in	r24, 0x20	; 32
 3bc:	8d 7f       	andi	r24, 0xFD	; 253
 3be:	80 bd       	out	0x20, r24	; 32
 3c0:	80 b5       	in	r24, 0x20	; 32
 3c2:	84 60       	ori	r24, 0x04	; 4
 3c4:	80 bd       	out	0x20, r24	; 32
 3c6:	8a b1       	in	r24, 0x0a	; 10
 3c8:	8b 7f       	andi	r24, 0xFB	; 251
 3ca:	8a b9       	out	0x0a, r24	; 10
 3cc:	17 c0       	rjmp	.+46     	; 0x3fc <UART_init+0xca>
 3ce:	83 30       	cpi	r24, 0x03	; 3
 3d0:	51 f4       	brne	.+20     	; 0x3e6 <UART_init+0xb4>
 3d2:	80 b5       	in	r24, 0x20	; 32
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	80 bd       	out	0x20, r24	; 32
 3d8:	80 b5       	in	r24, 0x20	; 32
 3da:	84 60       	ori	r24, 0x04	; 4
 3dc:	80 bd       	out	0x20, r24	; 32
 3de:	8a b1       	in	r24, 0x0a	; 10
 3e0:	8b 7f       	andi	r24, 0xFB	; 251
 3e2:	8a b9       	out	0x0a, r24	; 10
 3e4:	0b c0       	rjmp	.+22     	; 0x3fc <UART_init+0xca>
 3e6:	84 30       	cpi	r24, 0x04	; 4
 3e8:	49 f4       	brne	.+18     	; 0x3fc <UART_init+0xca>
 3ea:	80 b5       	in	r24, 0x20	; 32
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	80 bd       	out	0x20, r24	; 32
 3f0:	80 b5       	in	r24, 0x20	; 32
 3f2:	84 60       	ori	r24, 0x04	; 4
 3f4:	80 bd       	out	0x20, r24	; 32
 3f6:	8a b1       	in	r24, 0x0a	; 10
 3f8:	84 60       	ori	r24, 0x04	; 4
 3fa:	8a b9       	out	0x0a, r24	; 10
 3fc:	8a 81       	ldd	r24, Y+2	; 0x02
 3fe:	81 11       	cpse	r24, r1
 400:	07 c0       	rjmp	.+14     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 402:	80 b5       	in	r24, 0x20	; 32
 404:	8f 7e       	andi	r24, 0xEF	; 239
 406:	80 bd       	out	0x20, r24	; 32
 408:	80 b5       	in	r24, 0x20	; 32
 40a:	8f 7d       	andi	r24, 0xDF	; 223
 40c:	80 bd       	out	0x20, r24	; 32
 40e:	11 c0       	rjmp	.+34     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	39 f4       	brne	.+14     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 414:	80 b5       	in	r24, 0x20	; 32
 416:	8f 7e       	andi	r24, 0xEF	; 239
 418:	80 bd       	out	0x20, r24	; 32
 41a:	80 b5       	in	r24, 0x20	; 32
 41c:	80 62       	ori	r24, 0x20	; 32
 41e:	80 bd       	out	0x20, r24	; 32
 420:	08 c0       	rjmp	.+16     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	31 f4       	brne	.+12     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 426:	80 b5       	in	r24, 0x20	; 32
 428:	80 61       	ori	r24, 0x10	; 16
 42a:	80 bd       	out	0x20, r24	; 32
 42c:	80 b5       	in	r24, 0x20	; 32
 42e:	80 62       	ori	r24, 0x20	; 32
 430:	80 bd       	out	0x20, r24	; 32
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	81 11       	cpse	r24, r1
 436:	04 c0       	rjmp	.+8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 438:	80 b5       	in	r24, 0x20	; 32
 43a:	87 7f       	andi	r24, 0xF7	; 247
 43c:	80 bd       	out	0x20, r24	; 32
 43e:	05 c0       	rjmp	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	19 f4       	brne	.+6      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 444:	80 b5       	in	r24, 0x20	; 32
 446:	88 60       	ori	r24, 0x08	; 8
 448:	80 bd       	out	0x20, r24	; 32
 44a:	80 b5       	in	r24, 0x20	; 32
 44c:	8f 7b       	andi	r24, 0xBF	; 191
 44e:	80 bd       	out	0x20, r24	; 32
 450:	80 b5       	in	r24, 0x20	; 32
 452:	80 64       	ori	r24, 0x40	; 64
 454:	80 bd       	out	0x20, r24	; 32
 456:	88 81       	ld	r24, Y
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	21 f4       	brne	.+8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 45c:	8b b1       	in	r24, 0x0b	; 11
 45e:	82 60       	ori	r24, 0x02	; 2
 460:	8b b9       	out	0x0b, r24	; 11
 462:	05 c0       	rjmp	.+10     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 464:	81 11       	cpse	r24, r1
 466:	03 c0       	rjmp	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 468:	8b b1       	in	r24, 0x0b	; 11
 46a:	8d 7f       	andi	r24, 0xFD	; 253
 46c:	8b b9       	out	0x0b, r24	; 11
 46e:	8b b1       	in	r24, 0x0b	; 11
 470:	8e 7f       	andi	r24, 0xFE	; 254
 472:	8b b9       	out	0x0b, r24	; 11
 474:	8e 81       	ldd	r24, Y+6	; 0x06
 476:	81 11       	cpse	r24, r1
 478:	04 c0       	rjmp	.+8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47a:	8a b1       	in	r24, 0x0a	; 10
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	8a b9       	out	0x0a, r24	; 10
 480:	05 c0       	rjmp	.+10     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	19 f4       	brne	.+6      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 486:	8a b1       	in	r24, 0x0a	; 10
 488:	8f 77       	andi	r24, 0x7F	; 127
 48a:	8a b9       	out	0x0a, r24	; 10
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	81 11       	cpse	r24, r1
 490:	04 c0       	rjmp	.+8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 492:	8a b1       	in	r24, 0x0a	; 10
 494:	80 64       	ori	r24, 0x40	; 64
 496:	8a b9       	out	0x0a, r24	; 10
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	19 f4       	brne	.+6      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 49e:	8a b1       	in	r24, 0x0a	; 10
 4a0:	8f 7b       	andi	r24, 0xBF	; 191
 4a2:	8a b9       	out	0x0a, r24	; 10
 4a4:	8f 81       	ldd	r24, Y+7	; 0x07
 4a6:	81 11       	cpse	r24, r1
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4aa:	8a b1       	in	r24, 0x0a	; 10
 4ac:	80 62       	ori	r24, 0x20	; 32
 4ae:	8a b9       	out	0x0a, r24	; 10
 4b0:	05 c0       	rjmp	.+10     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	19 f4       	brne	.+6      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4b6:	8a b1       	in	r24, 0x0a	; 10
 4b8:	8f 7d       	andi	r24, 0xDF	; 223
 4ba:	8a b9       	out	0x0a, r24	; 10
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <UART_sendchar>:
 4c4:	5d 9b       	sbis	0x0b, 5	; 11
 4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <UART_sendchar>
 4c8:	8c b9       	out	0x0c, r24	; 12
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	08 95       	ret

000004ce <UART_sendstr>:
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	8c 01       	movw	r16, r24
 4da:	7b 01       	movw	r14, r22
 4dc:	c0 e0       	ldi	r28, 0x00	; 0
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <UART_sendstr+0x18>
 4e0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <UART_sendchar>
 4e4:	cf 5f       	subi	r28, 0xFF	; 255
 4e6:	f8 01       	movw	r30, r16
 4e8:	ec 0f       	add	r30, r28
 4ea:	f1 1d       	adc	r31, r1
 4ec:	80 81       	ld	r24, Z
 4ee:	81 11       	cpse	r24, r1
 4f0:	f7 cf       	rjmp	.-18     	; 0x4e0 <UART_sendstr+0x12>
 4f2:	f0 92 9d 00 	sts	0x009D, r15	; 0x80009d <send_n+0x1>
 4f6:	e0 92 9c 00 	sts	0x009C, r14	; 0x80009c <send_n>
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	ff 90       	pop	r15
 502:	ef 90       	pop	r14
 504:	08 95       	ret

00000506 <UART_receivechar>:
 506:	5f 9b       	sbis	0x0b, 7	; 11
 508:	fe cf       	rjmp	.-4      	; 0x506 <UART_receivechar>
 50a:	2c b1       	in	r18, 0x0c	; 12
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret

00000514 <UART_dispatcher>:



uart_errorstatus UART_dispatcher(const str_UART_CONFG *ptr_str_bcm_meduim)
{
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
	static uint16_t i=0;
	static uint16_t j=0;
	if(ptr_str_bcm_meduim == NULL)
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	09 f4       	brne	.+2      	; 0x51e <UART_dispatcher+0xa>
 51c:	79 c0       	rjmp	.+242    	; 0x610 <UART_dispatcher+0xfc>
 51e:	ec 01       	movw	r28, r24
	{
		return UART_NOT_VALID;
	}
	
	if((read_bit(UCSRA, 6) == 1 && i<send_n) || (i==0 && send_n>0))
 520:	5e 9b       	sbis	0x0b, 6	; 11
 522:	0b c0       	rjmp	.+22     	; 0x53a <UART_dispatcher+0x26>
 524:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <i.1738>
 528:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <i.1738+0x1>
 52c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <send_n>
 530:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <send_n+0x1>
 534:	28 17       	cp	r18, r24
 536:	39 07       	cpc	r19, r25
 538:	60 f0       	brcs	.+24     	; 0x552 <UART_dispatcher+0x3e>
 53a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <i.1738>
 53e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <i.1738+0x1>
 542:	89 2b       	or	r24, r25
 544:	e1 f4       	brne	.+56     	; 0x57e <UART_dispatcher+0x6a>
 546:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <send_n>
 54a:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <send_n+0x1>
 54e:	89 2b       	or	r24, r25
 550:	b1 f0       	breq	.+44     	; 0x57e <UART_dispatcher+0x6a>
	{
		set_bit(UCSRA,6);
 552:	8b b1       	in	r24, 0x0b	; 11
 554:	80 64       	ori	r24, 0x40	; 64
 556:	8b b9       	out	0x0b, r24	; 11
		bcm_send(str_send[i]);
 558:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <i.1738>
 55c:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <i.1738+0x1>
 560:	ee 5f       	subi	r30, 0xFE	; 254
 562:	fe 4f       	sbci	r31, 0xFE	; 254
 564:	80 81       	ld	r24, Z
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 34 03 	call	0x668	; 0x668 <bcm_send>
		i++;
 56c:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <i.1738>
 570:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <i.1738+0x1>
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <i.1738+0x1>
 57a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <i.1738>
	}
	if(read_bit(UCSRA, 7) == 1)
 57e:	5f 9b       	sbis	0x0b, 7	; 11
 580:	11 c0       	rjmp	.+34     	; 0x5a4 <UART_dispatcher+0x90>
	{
		bcm_receive(&str_receive[j]);
 582:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <j.1739>
 586:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <j.1739+0x1>
 58a:	82 56       	subi	r24, 0x62	; 98
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <bcm_receive>
		j++;
 592:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <j.1739>
 596:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <j.1739+0x1>
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <j.1739+0x1>
 5a0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <j.1739>
	}
	if(i!=0 && i==send_n)
 5a4:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <i.1738>
 5a8:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <i.1738+0x1>
 5ac:	00 97       	sbiw	r24, 0x00	; 0
 5ae:	91 f0       	breq	.+36     	; 0x5d4 <UART_dispatcher+0xc0>
 5b0:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <send_n>
 5b4:	30 91 9d 00 	lds	r19, 0x009D	; 0x80009d <send_n+0x1>
 5b8:	82 17       	cp	r24, r18
 5ba:	93 07       	cpc	r25, r19
 5bc:	59 f4       	brne	.+22     	; 0x5d4 <UART_dispatcher+0xc0>
	{
		ptr_str_bcm_meduim->send_callback();
 5be:	e8 85       	ldd	r30, Y+8	; 0x08
 5c0:	f9 85       	ldd	r31, Y+9	; 0x09
 5c2:	09 95       	icall
		i=0;
 5c4:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <i.1738+0x1>
 5c8:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <i.1738>
		send_n=0;
 5cc:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <send_n+0x1>
 5d0:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <send_n>
	}

	if(j>0 && str_receive[j-1]=='\r')
 5d4:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <j.1739>
 5d8:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <j.1739+0x1>
 5dc:	61 15       	cp	r22, r1
 5de:	71 05       	cpc	r23, r1
 5e0:	c9 f0       	breq	.+50     	; 0x614 <UART_dispatcher+0x100>
 5e2:	cb 01       	movw	r24, r22
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	fc 01       	movw	r30, r24
 5e8:	e2 56       	subi	r30, 0x62	; 98
 5ea:	ff 4f       	sbci	r31, 0xFF	; 255
 5ec:	20 81       	ld	r18, Z
 5ee:	2d 30       	cpi	r18, 0x0D	; 13
 5f0:	99 f4       	brne	.+38     	; 0x618 <UART_dispatcher+0x104>
	{
		str_receive[j-1]='\0';
 5f2:	fc 01       	movw	r30, r24
 5f4:	e2 56       	subi	r30, 0x62	; 98
 5f6:	ff 4f       	sbci	r31, 0xFF	; 255
 5f8:	10 82       	st	Z, r1
		ptr_str_bcm_meduim->receive_callback(str_receive, j);
 5fa:	ea 85       	ldd	r30, Y+10	; 0x0a
 5fc:	fb 85       	ldd	r31, Y+11	; 0x0b
 5fe:	8e e9       	ldi	r24, 0x9E	; 158
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	09 95       	icall
		j=0;
 604:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <j.1739+0x1>
 608:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <j.1739>
	}
	return UART_VALID;
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	05 c0       	rjmp	.+10     	; 0x61a <UART_dispatcher+0x106>
{
	static uint16_t i=0;
	static uint16_t j=0;
	if(ptr_str_bcm_meduim == NULL)
	{
		return UART_NOT_VALID;
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	03 c0       	rjmp	.+6      	; 0x61a <UART_dispatcher+0x106>
	{
		str_receive[j-1]='\0';
		ptr_str_bcm_meduim->receive_callback(str_receive, j);
		j=0;
	}
	return UART_VALID;
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	01 c0       	rjmp	.+2      	; 0x61a <UART_dispatcher+0x106>
 618:	80 e0       	ldi	r24, 0x00	; 0
}
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <bcm_init>:
	else
	{
		return wrong_type_error;
	}
	return SUCCESS;
}
 620:	00 97       	sbiw	r24, 0x00	; 0
 622:	e1 f0       	breq	.+56     	; 0x65c <bcm_init+0x3c>
 624:	fc 01       	movw	r30, r24
 626:	20 81       	ld	r18, Z
 628:	21 11       	cpse	r18, r1
 62a:	12 c0       	rjmp	.+36     	; 0x650 <bcm_init+0x30>
 62c:	a1 81       	ldd	r26, Z+1	; 0x01
 62e:	b2 81       	ldd	r27, Z+2	; 0x02
 630:	1b 96       	adiw	r26, 0x0b	; 11
 632:	5c 93       	st	X, r21
 634:	4e 93       	st	-X, r20
 636:	1a 97       	sbiw	r26, 0x0a	; 10
 638:	a1 81       	ldd	r26, Z+1	; 0x01
 63a:	b2 81       	ldd	r27, Z+2	; 0x02
 63c:	19 96       	adiw	r26, 0x09	; 9
 63e:	7c 93       	st	X, r23
 640:	6e 93       	st	-X, r22
 642:	18 97       	sbiw	r26, 0x08	; 8
 644:	81 81       	ldd	r24, Z+1	; 0x01
 646:	92 81       	ldd	r25, Z+2	; 0x02
 648:	0e 94 99 01 	call	0x332	; 0x332 <UART_init>
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	08 95       	ret
 650:	22 30       	cpi	r18, 0x02	; 2
 652:	31 f0       	breq	.+12     	; 0x660 <bcm_init+0x40>
 654:	21 30       	cpi	r18, 0x01	; 1
 656:	31 f0       	breq	.+12     	; 0x664 <bcm_init+0x44>
 658:	8b e0       	ldi	r24, 0x0B	; 11
 65a:	08 95       	ret
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	08 95       	ret
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	08 95       	ret
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	08 95       	ret

00000668 <bcm_send>:
 668:	fc 01       	movw	r30, r24
 66a:	90 81       	ld	r25, Z
 66c:	91 11       	cpse	r25, r1
 66e:	05 c0       	rjmp	.+10     	; 0x67a <bcm_send+0x12>
 670:	86 2f       	mov	r24, r22
 672:	0e 94 62 02 	call	0x4c4	; 0x4c4 <UART_sendchar>
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	08 95       	ret
 67a:	92 30       	cpi	r25, 0x02	; 2
 67c:	21 f0       	breq	.+8      	; 0x686 <bcm_send+0x1e>
 67e:	91 30       	cpi	r25, 0x01	; 1
 680:	21 f0       	breq	.+8      	; 0x68a <bcm_send+0x22>
 682:	8b e0       	ldi	r24, 0x0B	; 11
 684:	08 95       	ret
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	08 95       	ret
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	08 95       	ret

0000068e <bcm_send_n>:
 68e:	fc 01       	movw	r30, r24
 690:	90 81       	ld	r25, Z
 692:	91 11       	cpse	r25, r1
 694:	06 c0       	rjmp	.+12     	; 0x6a2 <bcm_send_n+0x14>
 696:	cb 01       	movw	r24, r22
 698:	ba 01       	movw	r22, r20
 69a:	0e 94 67 02 	call	0x4ce	; 0x4ce <UART_sendstr>
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	08 95       	ret
 6a2:	92 30       	cpi	r25, 0x02	; 2
 6a4:	21 f0       	breq	.+8      	; 0x6ae <bcm_send_n+0x20>
 6a6:	91 30       	cpi	r25, 0x01	; 1
 6a8:	21 f0       	breq	.+8      	; 0x6b2 <bcm_send_n+0x24>
 6aa:	8b e0       	ldi	r24, 0x0B	; 11
 6ac:	08 95       	ret
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	08 95       	ret
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	08 95       	ret

000006b6 <bcm_receive>:
 6b6:	fc 01       	movw	r30, r24
 6b8:	90 81       	ld	r25, Z
 6ba:	91 11       	cpse	r25, r1
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <bcm_receive+0x12>
 6be:	cb 01       	movw	r24, r22
 6c0:	0e 94 83 02 	call	0x506	; 0x506 <UART_receivechar>
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	08 95       	ret
 6c8:	92 30       	cpi	r25, 0x02	; 2
 6ca:	21 f0       	breq	.+8      	; 0x6d4 <bcm_receive+0x1e>
 6cc:	91 30       	cpi	r25, 0x01	; 1
 6ce:	21 f0       	breq	.+8      	; 0x6d8 <bcm_receive+0x22>
 6d0:	8b e0       	ldi	r24, 0x0B	; 11
 6d2:	08 95       	ret
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	08 95       	ret
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	08 95       	ret

000006dc <bcm_dispatcher>:


enu_system_status_t bcm_dispatcher(const str_t_bcm_meduim_t* ptr_str_bcm_meduim)
{
	if(ptr_str_bcm_meduim == NULL)
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	81 f0       	breq	.+32     	; 0x700 <bcm_dispatcher+0x24>
	{
		return null_pointer_error;
	}
	if(ptr_str_bcm_meduim->comunication_meduim==UART)
 6e0:	fc 01       	movw	r30, r24
 6e2:	20 81       	ld	r18, Z
 6e4:	21 11       	cpse	r18, r1
 6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <bcm_dispatcher+0x18>
	{
		UART_dispatcher(ptr_str_bcm_meduim->bcm_properties);
 6e8:	81 81       	ldd	r24, Z+1	; 0x01
 6ea:	92 81       	ldd	r25, Z+2	; 0x02
 6ec:	0e 94 8a 02 	call	0x514	; 0x514 <UART_dispatcher>
	}
	else
	{
		return wrong_type_error;
	}
	return SUCCESS;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	08 95       	ret
	{
		UART_dispatcher(ptr_str_bcm_meduim->bcm_properties);
	}
		
	
	else if(ptr_str_bcm_meduim->comunication_meduim==I2C)
 6f4:	22 30       	cpi	r18, 0x02	; 2
 6f6:	31 f0       	breq	.+12     	; 0x704 <bcm_dispatcher+0x28>
	{
		//to do handling I2C
	}
	else if(ptr_str_bcm_meduim->comunication_meduim==SPI)
 6f8:	21 30       	cpi	r18, 0x01	; 1
 6fa:	31 f0       	breq	.+12     	; 0x708 <bcm_dispatcher+0x2c>
	{
		//to do handling SPI
	}
	else
	{
		return wrong_type_error;
 6fc:	8b e0       	ldi	r24, 0x0B	; 11
 6fe:	08 95       	ret

enu_system_status_t bcm_dispatcher(const str_t_bcm_meduim_t* ptr_str_bcm_meduim)
{
	if(ptr_str_bcm_meduim == NULL)
	{
		return null_pointer_error;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	08 95       	ret
	}
	else
	{
		return wrong_type_error;
	}
	return SUCCESS;
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	08 95       	ret
 708:	80 e0       	ldi	r24, 0x00	; 0
}
 70a:	08 95       	ret

0000070c <__divsf3>:
 70c:	0e 94 9a 03 	call	0x734	; 0x734 <__divsf3x>
 710:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_round>
 714:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fp_pscB>
 718:	58 f0       	brcs	.+22     	; 0x730 <__divsf3+0x24>
 71a:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_pscA>
 71e:	40 f0       	brcs	.+16     	; 0x730 <__divsf3+0x24>
 720:	29 f4       	brne	.+10     	; 0x72c <__divsf3+0x20>
 722:	5f 3f       	cpi	r21, 0xFF	; 255
 724:	29 f0       	breq	.+10     	; 0x730 <__divsf3+0x24>
 726:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_inf>
 72a:	51 11       	cpse	r21, r1
 72c:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_szero>
 730:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__fp_nan>

00000734 <__divsf3x>:
 734:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_split3>
 738:	68 f3       	brcs	.-38     	; 0x714 <__divsf3+0x8>

0000073a <__divsf3_pse>:
 73a:	99 23       	and	r25, r25
 73c:	b1 f3       	breq	.-20     	; 0x72a <__divsf3+0x1e>
 73e:	55 23       	and	r21, r21
 740:	91 f3       	breq	.-28     	; 0x726 <__divsf3+0x1a>
 742:	95 1b       	sub	r25, r21
 744:	55 0b       	sbc	r21, r21
 746:	bb 27       	eor	r27, r27
 748:	aa 27       	eor	r26, r26
 74a:	62 17       	cp	r22, r18
 74c:	73 07       	cpc	r23, r19
 74e:	84 07       	cpc	r24, r20
 750:	38 f0       	brcs	.+14     	; 0x760 <__divsf3_pse+0x26>
 752:	9f 5f       	subi	r25, 0xFF	; 255
 754:	5f 4f       	sbci	r21, 0xFF	; 255
 756:	22 0f       	add	r18, r18
 758:	33 1f       	adc	r19, r19
 75a:	44 1f       	adc	r20, r20
 75c:	aa 1f       	adc	r26, r26
 75e:	a9 f3       	breq	.-22     	; 0x74a <__divsf3_pse+0x10>
 760:	35 d0       	rcall	.+106    	; 0x7cc <__divsf3_pse+0x92>
 762:	0e 2e       	mov	r0, r30
 764:	3a f0       	brmi	.+14     	; 0x774 <__divsf3_pse+0x3a>
 766:	e0 e8       	ldi	r30, 0x80	; 128
 768:	32 d0       	rcall	.+100    	; 0x7ce <__divsf3_pse+0x94>
 76a:	91 50       	subi	r25, 0x01	; 1
 76c:	50 40       	sbci	r21, 0x00	; 0
 76e:	e6 95       	lsr	r30
 770:	00 1c       	adc	r0, r0
 772:	ca f7       	brpl	.-14     	; 0x766 <__divsf3_pse+0x2c>
 774:	2b d0       	rcall	.+86     	; 0x7cc <__divsf3_pse+0x92>
 776:	fe 2f       	mov	r31, r30
 778:	29 d0       	rcall	.+82     	; 0x7cc <__divsf3_pse+0x92>
 77a:	66 0f       	add	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	bb 1f       	adc	r27, r27
 782:	26 17       	cp	r18, r22
 784:	37 07       	cpc	r19, r23
 786:	48 07       	cpc	r20, r24
 788:	ab 07       	cpc	r26, r27
 78a:	b0 e8       	ldi	r27, 0x80	; 128
 78c:	09 f0       	breq	.+2      	; 0x790 <__divsf3_pse+0x56>
 78e:	bb 0b       	sbc	r27, r27
 790:	80 2d       	mov	r24, r0
 792:	bf 01       	movw	r22, r30
 794:	ff 27       	eor	r31, r31
 796:	93 58       	subi	r25, 0x83	; 131
 798:	5f 4f       	sbci	r21, 0xFF	; 255
 79a:	3a f0       	brmi	.+14     	; 0x7aa <__divsf3_pse+0x70>
 79c:	9e 3f       	cpi	r25, 0xFE	; 254
 79e:	51 05       	cpc	r21, r1
 7a0:	78 f0       	brcs	.+30     	; 0x7c0 <__divsf3_pse+0x86>
 7a2:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_inf>
 7a6:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_szero>
 7aa:	5f 3f       	cpi	r21, 0xFF	; 255
 7ac:	e4 f3       	brlt	.-8      	; 0x7a6 <__divsf3_pse+0x6c>
 7ae:	98 3e       	cpi	r25, 0xE8	; 232
 7b0:	d4 f3       	brlt	.-12     	; 0x7a6 <__divsf3_pse+0x6c>
 7b2:	86 95       	lsr	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f7 95       	ror	r31
 7bc:	9f 5f       	subi	r25, 0xFF	; 255
 7be:	c9 f7       	brne	.-14     	; 0x7b2 <__divsf3_pse+0x78>
 7c0:	88 0f       	add	r24, r24
 7c2:	91 1d       	adc	r25, r1
 7c4:	96 95       	lsr	r25
 7c6:	87 95       	ror	r24
 7c8:	97 f9       	bld	r25, 7
 7ca:	08 95       	ret
 7cc:	e1 e0       	ldi	r30, 0x01	; 1
 7ce:	66 0f       	add	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	88 1f       	adc	r24, r24
 7d4:	bb 1f       	adc	r27, r27
 7d6:	62 17       	cp	r22, r18
 7d8:	73 07       	cpc	r23, r19
 7da:	84 07       	cpc	r24, r20
 7dc:	ba 07       	cpc	r27, r26
 7de:	20 f0       	brcs	.+8      	; 0x7e8 <__divsf3_pse+0xae>
 7e0:	62 1b       	sub	r22, r18
 7e2:	73 0b       	sbc	r23, r19
 7e4:	84 0b       	sbc	r24, r20
 7e6:	ba 0b       	sbc	r27, r26
 7e8:	ee 1f       	adc	r30, r30
 7ea:	88 f7       	brcc	.-30     	; 0x7ce <__divsf3_pse+0x94>
 7ec:	e0 95       	com	r30
 7ee:	08 95       	ret

000007f0 <__fixunssfsi>:
 7f0:	0e 94 94 04 	call	0x928	; 0x928 <__fp_splitA>
 7f4:	88 f0       	brcs	.+34     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7f6:	9f 57       	subi	r25, 0x7F	; 127
 7f8:	98 f0       	brcs	.+38     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7fa:	b9 2f       	mov	r27, r25
 7fc:	99 27       	eor	r25, r25
 7fe:	b7 51       	subi	r27, 0x17	; 23
 800:	b0 f0       	brcs	.+44     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 802:	e1 f0       	breq	.+56     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 804:	66 0f       	add	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	1a f0       	brmi	.+6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80e:	ba 95       	dec	r27
 810:	c9 f7       	brne	.-14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 812:	14 c0       	rjmp	.+40     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 814:	b1 30       	cpi	r27, 0x01	; 1
 816:	91 f0       	breq	.+36     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 818:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_zero>
 81c:	b1 e0       	ldi	r27, 0x01	; 1
 81e:	08 95       	ret
 820:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_zero>
 824:	67 2f       	mov	r22, r23
 826:	78 2f       	mov	r23, r24
 828:	88 27       	eor	r24, r24
 82a:	b8 5f       	subi	r27, 0xF8	; 248
 82c:	39 f0       	breq	.+14     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 82e:	b9 3f       	cpi	r27, 0xF9	; 249
 830:	cc f3       	brlt	.-14     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 832:	86 95       	lsr	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	b3 95       	inc	r27
 83a:	d9 f7       	brne	.-10     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 83c:	3e f4       	brtc	.+14     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 83e:	90 95       	com	r25
 840:	80 95       	com	r24
 842:	70 95       	com	r23
 844:	61 95       	neg	r22
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	08 95       	ret

0000084e <__floatunsisf>:
 84e:	e8 94       	clt
 850:	09 c0       	rjmp	.+18     	; 0x864 <__stack+0x5>

00000852 <__floatsisf>:
 852:	97 fb       	bst	r25, 7
 854:	3e f4       	brtc	.+14     	; 0x864 <__stack+0x5>
 856:	90 95       	com	r25
 858:	80 95       	com	r24
 85a:	70 95       	com	r23
 85c:	61 95       	neg	r22
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	99 23       	and	r25, r25
 866:	a9 f0       	breq	.+42     	; 0x892 <__stack+0x33>
 868:	f9 2f       	mov	r31, r25
 86a:	96 e9       	ldi	r25, 0x96	; 150
 86c:	bb 27       	eor	r27, r27
 86e:	93 95       	inc	r25
 870:	f6 95       	lsr	r31
 872:	87 95       	ror	r24
 874:	77 95       	ror	r23
 876:	67 95       	ror	r22
 878:	b7 95       	ror	r27
 87a:	f1 11       	cpse	r31, r1
 87c:	f8 cf       	rjmp	.-16     	; 0x86e <__stack+0xf>
 87e:	fa f4       	brpl	.+62     	; 0x8be <__stack+0x5f>
 880:	bb 0f       	add	r27, r27
 882:	11 f4       	brne	.+4      	; 0x888 <__stack+0x29>
 884:	60 ff       	sbrs	r22, 0
 886:	1b c0       	rjmp	.+54     	; 0x8be <__stack+0x5f>
 888:	6f 5f       	subi	r22, 0xFF	; 255
 88a:	7f 4f       	sbci	r23, 0xFF	; 255
 88c:	8f 4f       	sbci	r24, 0xFF	; 255
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	16 c0       	rjmp	.+44     	; 0x8be <__stack+0x5f>
 892:	88 23       	and	r24, r24
 894:	11 f0       	breq	.+4      	; 0x89a <__stack+0x3b>
 896:	96 e9       	ldi	r25, 0x96	; 150
 898:	11 c0       	rjmp	.+34     	; 0x8bc <__stack+0x5d>
 89a:	77 23       	and	r23, r23
 89c:	21 f0       	breq	.+8      	; 0x8a6 <__stack+0x47>
 89e:	9e e8       	ldi	r25, 0x8E	; 142
 8a0:	87 2f       	mov	r24, r23
 8a2:	76 2f       	mov	r23, r22
 8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <__stack+0x51>
 8a6:	66 23       	and	r22, r22
 8a8:	71 f0       	breq	.+28     	; 0x8c6 <__stack+0x67>
 8aa:	96 e8       	ldi	r25, 0x86	; 134
 8ac:	86 2f       	mov	r24, r22
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	2a f0       	brmi	.+10     	; 0x8be <__stack+0x5f>
 8b4:	9a 95       	dec	r25
 8b6:	66 0f       	add	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	da f7       	brpl	.-10     	; 0x8b4 <__stack+0x55>
 8be:	88 0f       	add	r24, r24
 8c0:	96 95       	lsr	r25
 8c2:	87 95       	ror	r24
 8c4:	97 f9       	bld	r25, 7
 8c6:	08 95       	ret

000008c8 <__fp_inf>:
 8c8:	97 f9       	bld	r25, 7
 8ca:	9f 67       	ori	r25, 0x7F	; 127
 8cc:	80 e8       	ldi	r24, 0x80	; 128
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	08 95       	ret

000008d4 <__fp_nan>:
 8d4:	9f ef       	ldi	r25, 0xFF	; 255
 8d6:	80 ec       	ldi	r24, 0xC0	; 192
 8d8:	08 95       	ret

000008da <__fp_pscA>:
 8da:	00 24       	eor	r0, r0
 8dc:	0a 94       	dec	r0
 8de:	16 16       	cp	r1, r22
 8e0:	17 06       	cpc	r1, r23
 8e2:	18 06       	cpc	r1, r24
 8e4:	09 06       	cpc	r0, r25
 8e6:	08 95       	ret

000008e8 <__fp_pscB>:
 8e8:	00 24       	eor	r0, r0
 8ea:	0a 94       	dec	r0
 8ec:	12 16       	cp	r1, r18
 8ee:	13 06       	cpc	r1, r19
 8f0:	14 06       	cpc	r1, r20
 8f2:	05 06       	cpc	r0, r21
 8f4:	08 95       	ret

000008f6 <__fp_round>:
 8f6:	09 2e       	mov	r0, r25
 8f8:	03 94       	inc	r0
 8fa:	00 0c       	add	r0, r0
 8fc:	11 f4       	brne	.+4      	; 0x902 <__fp_round+0xc>
 8fe:	88 23       	and	r24, r24
 900:	52 f0       	brmi	.+20     	; 0x916 <__fp_round+0x20>
 902:	bb 0f       	add	r27, r27
 904:	40 f4       	brcc	.+16     	; 0x916 <__fp_round+0x20>
 906:	bf 2b       	or	r27, r31
 908:	11 f4       	brne	.+4      	; 0x90e <__fp_round+0x18>
 90a:	60 ff       	sbrs	r22, 0
 90c:	04 c0       	rjmp	.+8      	; 0x916 <__fp_round+0x20>
 90e:	6f 5f       	subi	r22, 0xFF	; 255
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	8f 4f       	sbci	r24, 0xFF	; 255
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	08 95       	ret

00000918 <__fp_split3>:
 918:	57 fd       	sbrc	r21, 7
 91a:	90 58       	subi	r25, 0x80	; 128
 91c:	44 0f       	add	r20, r20
 91e:	55 1f       	adc	r21, r21
 920:	59 f0       	breq	.+22     	; 0x938 <__fp_splitA+0x10>
 922:	5f 3f       	cpi	r21, 0xFF	; 255
 924:	71 f0       	breq	.+28     	; 0x942 <__fp_splitA+0x1a>
 926:	47 95       	ror	r20

00000928 <__fp_splitA>:
 928:	88 0f       	add	r24, r24
 92a:	97 fb       	bst	r25, 7
 92c:	99 1f       	adc	r25, r25
 92e:	61 f0       	breq	.+24     	; 0x948 <__fp_splitA+0x20>
 930:	9f 3f       	cpi	r25, 0xFF	; 255
 932:	79 f0       	breq	.+30     	; 0x952 <__fp_splitA+0x2a>
 934:	87 95       	ror	r24
 936:	08 95       	ret
 938:	12 16       	cp	r1, r18
 93a:	13 06       	cpc	r1, r19
 93c:	14 06       	cpc	r1, r20
 93e:	55 1f       	adc	r21, r21
 940:	f2 cf       	rjmp	.-28     	; 0x926 <__fp_split3+0xe>
 942:	46 95       	lsr	r20
 944:	f1 df       	rcall	.-30     	; 0x928 <__fp_splitA>
 946:	08 c0       	rjmp	.+16     	; 0x958 <__fp_splitA+0x30>
 948:	16 16       	cp	r1, r22
 94a:	17 06       	cpc	r1, r23
 94c:	18 06       	cpc	r1, r24
 94e:	99 1f       	adc	r25, r25
 950:	f1 cf       	rjmp	.-30     	; 0x934 <__fp_splitA+0xc>
 952:	86 95       	lsr	r24
 954:	71 05       	cpc	r23, r1
 956:	61 05       	cpc	r22, r1
 958:	08 94       	sec
 95a:	08 95       	ret

0000095c <__fp_zero>:
 95c:	e8 94       	clt

0000095e <__fp_szero>:
 95e:	bb 27       	eor	r27, r27
 960:	66 27       	eor	r22, r22
 962:	77 27       	eor	r23, r23
 964:	cb 01       	movw	r24, r22
 966:	97 f9       	bld	r25, 7
 968:	08 95       	ret

0000096a <strcmp>:
 96a:	fb 01       	movw	r30, r22
 96c:	dc 01       	movw	r26, r24
 96e:	8d 91       	ld	r24, X+
 970:	01 90       	ld	r0, Z+
 972:	80 19       	sub	r24, r0
 974:	01 10       	cpse	r0, r1
 976:	d9 f3       	breq	.-10     	; 0x96e <strcmp+0x4>
 978:	99 0b       	sbc	r25, r25
 97a:	08 95       	ret

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
